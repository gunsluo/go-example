package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "router":
			err = z.Router.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Router")
				return
			}
		case "msg":
			z.Msg, err = dc.ReadBytes(z.Msg)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "router"
	err = en.Append(0x82, 0xa6, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Router.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Router")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "router"
	o = append(o, 0x82, 0xa6, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72)
	o, err = z.Router.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Router")
		return
	}
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendBytes(o, z.Msg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "router":
			bts, err = z.Router.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Router")
				return
			}
		case "msg":
			z.Msg, bts, err = msgp.ReadBytesBytes(bts, z.Msg)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 7 + z.Router.Msgsize() + 4 + msgp.BytesPrefixSize + len(z.Msg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageRouter) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = MessageType(zb0002)
			}
		case "routingPaths":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RoutingPaths")
				return
			}
			if cap(z.RoutingPaths) >= int(zb0003) {
				z.RoutingPaths = (z.RoutingPaths)[:zb0003]
			} else {
				z.RoutingPaths = make([]string, zb0003)
			}
			for za0001 := range z.RoutingPaths {
				z.RoutingPaths[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RoutingPaths", za0001)
					return
				}
			}
		case "clientId":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ClientIDs")
				return
			}
			if cap(z.ClientIDs) >= int(zb0004) {
				z.ClientIDs = (z.ClientIDs)[:zb0004]
			} else {
				z.ClientIDs = make([]string, zb0004)
			}
			for za0002 := range z.ClientIDs {
				z.ClientIDs[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ClientIDs", za0002)
					return
				}
			}
		case "namespace":
			z.Namespace, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Namespace")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageRouter) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "type"
	err = en.Append(0x84, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "routingPaths"
	err = en.Append(0xac, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RoutingPaths)))
	if err != nil {
		err = msgp.WrapError(err, "RoutingPaths")
		return
	}
	for za0001 := range z.RoutingPaths {
		err = en.WriteString(z.RoutingPaths[za0001])
		if err != nil {
			err = msgp.WrapError(err, "RoutingPaths", za0001)
			return
		}
	}
	// write "clientId"
	err = en.Append(0xa8, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ClientIDs)))
	if err != nil {
		err = msgp.WrapError(err, "ClientIDs")
		return
	}
	for za0002 := range z.ClientIDs {
		err = en.WriteString(z.ClientIDs[za0002])
		if err != nil {
			err = msgp.WrapError(err, "ClientIDs", za0002)
			return
		}
	}
	// write "namespace"
	err = en.Append(0xa9, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Namespace)
	if err != nil {
		err = msgp.WrapError(err, "Namespace")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageRouter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "type"
	o = append(o, 0x84, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, int(z.Type))
	// string "routingPaths"
	o = append(o, 0xac, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RoutingPaths)))
	for za0001 := range z.RoutingPaths {
		o = msgp.AppendString(o, z.RoutingPaths[za0001])
	}
	// string "clientId"
	o = append(o, 0xa8, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ClientIDs)))
	for za0002 := range z.ClientIDs {
		o = msgp.AppendString(o, z.ClientIDs[za0002])
	}
	// string "namespace"
	o = append(o, 0xa9, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65)
	o = msgp.AppendString(o, z.Namespace)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageRouter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = MessageType(zb0002)
			}
		case "routingPaths":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RoutingPaths")
				return
			}
			if cap(z.RoutingPaths) >= int(zb0003) {
				z.RoutingPaths = (z.RoutingPaths)[:zb0003]
			} else {
				z.RoutingPaths = make([]string, zb0003)
			}
			for za0001 := range z.RoutingPaths {
				z.RoutingPaths[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RoutingPaths", za0001)
					return
				}
			}
		case "clientId":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientIDs")
				return
			}
			if cap(z.ClientIDs) >= int(zb0004) {
				z.ClientIDs = (z.ClientIDs)[:zb0004]
			} else {
				z.ClientIDs = make([]string, zb0004)
			}
			for za0002 := range z.ClientIDs {
				z.ClientIDs[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientIDs", za0002)
					return
				}
			}
		case "namespace":
			z.Namespace, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Namespace")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageRouter) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.RoutingPaths {
		s += msgp.StringPrefixSize + len(z.RoutingPaths[za0001])
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0002 := range z.ClientIDs {
		s += msgp.StringPrefixSize + len(z.ClientIDs[za0002])
	}
	s += 10 + msgp.StringPrefixSize + len(z.Namespace)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MessageType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MessageType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MessageType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MessageType) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
