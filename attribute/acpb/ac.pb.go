// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ac.proto

package acpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AttributeType int32

const (
	ATTRIBUTE_TYPE_INVALID AttributeType = 0
	ATTRIBUTE_TYPE_STRING  AttributeType = 1
	ATTRIBUTE_TYPE_NUMBER  AttributeType = 2
	ATTRIBUTE_TYPE_BOOLEAN AttributeType = 3
)

var AttributeType_name = map[int32]string{
	0: "ATTRIBUTE_TYPE_INVALID",
	1: "ATTRIBUTE_TYPE_STRING",
	2: "ATTRIBUTE_TYPE_NUMBER",
	3: "ATTRIBUTE_TYPE_BOOLEAN",
}

var AttributeType_value = map[string]int32{
	"ATTRIBUTE_TYPE_INVALID": 0,
	"ATTRIBUTE_TYPE_STRING":  1,
	"ATTRIBUTE_TYPE_NUMBER":  2,
	"ATTRIBUTE_TYPE_BOOLEAN": 3,
}

func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{0}
}

type StringAttributeValue struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *StringAttributeValue) Reset()      { *m = StringAttributeValue{} }
func (*StringAttributeValue) ProtoMessage() {}
func (*StringAttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{0}
}
func (m *StringAttributeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringAttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringAttributeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringAttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringAttributeValue.Merge(m, src)
}
func (m *StringAttributeValue) XXX_Size() int {
	return m.Size()
}
func (m *StringAttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StringAttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_StringAttributeValue proto.InternalMessageInfo

func (m *StringAttributeValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NumberAttributeValue struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NumberAttributeValue) Reset()      { *m = NumberAttributeValue{} }
func (*NumberAttributeValue) ProtoMessage() {}
func (*NumberAttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{1}
}
func (m *NumberAttributeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumberAttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumberAttributeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumberAttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberAttributeValue.Merge(m, src)
}
func (m *NumberAttributeValue) XXX_Size() int {
	return m.Size()
}
func (m *NumberAttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberAttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_NumberAttributeValue proto.InternalMessageInfo

func (m *NumberAttributeValue) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BooleanAttributeValue struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BooleanAttributeValue) Reset()      { *m = BooleanAttributeValue{} }
func (*BooleanAttributeValue) ProtoMessage() {}
func (*BooleanAttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{2}
}
func (m *BooleanAttributeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanAttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanAttributeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BooleanAttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanAttributeValue.Merge(m, src)
}
func (m *BooleanAttributeValue) XXX_Size() int {
	return m.Size()
}
func (m *BooleanAttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanAttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanAttributeValue proto.InternalMessageInfo

func (m *BooleanAttributeValue) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Attribute struct {
	Name     string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type     AttributeType `protobuf:"varint,2,opt,name=type,proto3,enum=target.grpc.ac.AttributeType" json:"type,omitempty"`
	Required bool          `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	Default  *types.Any    `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
}

func (m *Attribute) Reset()      { *m = Attribute{} }
func (*Attribute) ProtoMessage() {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{3}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetType() AttributeType {
	if m != nil {
		return m.Type
	}
	return ATTRIBUTE_TYPE_INVALID
}

func (m *Attribute) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Attribute) GetDefault() *types.Any {
	if m != nil {
		return m.Default
	}
	return nil
}

type ConditionOption struct {
	Expression string       `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *ConditionOption) Reset()      { *m = ConditionOption{} }
func (*ConditionOption) ProtoMessage() {}
func (*ConditionOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{4}
}
func (m *ConditionOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConditionOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConditionOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConditionOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionOption.Merge(m, src)
}
func (m *ConditionOption) XXX_Size() int {
	return m.Size()
}
func (m *ConditionOption) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionOption.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionOption proto.InternalMessageInfo

func (m *ConditionOption) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *ConditionOption) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Condition struct {
	Name    string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Options *ConditionOption `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (m *Condition) Reset()      { *m = Condition{} }
func (*Condition) ProtoMessage() {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{5}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Condition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Condition) GetOptions() *ConditionOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type PredefinedPolicy struct {
	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Resources   []string     `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
	Actions     []string     `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	Conditions  []*Condition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *PredefinedPolicy) Reset()      { *m = PredefinedPolicy{} }
func (*PredefinedPolicy) ProtoMessage() {}
func (*PredefinedPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{6}
}
func (m *PredefinedPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredefinedPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredefinedPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredefinedPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredefinedPolicy.Merge(m, src)
}
func (m *PredefinedPolicy) XXX_Size() int {
	return m.Size()
}
func (m *PredefinedPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PredefinedPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PredefinedPolicy proto.InternalMessageInfo

func (m *PredefinedPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PredefinedPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PredefinedPolicy) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PredefinedPolicy) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *PredefinedPolicy) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type UpsertPredefinedPoliciesRequest struct {
	Policies []*PredefinedPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *UpsertPredefinedPoliciesRequest) Reset()      { *m = UpsertPredefinedPoliciesRequest{} }
func (*UpsertPredefinedPoliciesRequest) ProtoMessage() {}
func (*UpsertPredefinedPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{7}
}
func (m *UpsertPredefinedPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPredefinedPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPredefinedPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPredefinedPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPredefinedPoliciesRequest.Merge(m, src)
}
func (m *UpsertPredefinedPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPredefinedPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPredefinedPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPredefinedPoliciesRequest proto.InternalMessageInfo

func (m *UpsertPredefinedPoliciesRequest) GetPolicies() []*PredefinedPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type UpsertPredefinedPoliciesReply struct {
}

func (m *UpsertPredefinedPoliciesReply) Reset()      { *m = UpsertPredefinedPoliciesReply{} }
func (*UpsertPredefinedPoliciesReply) ProtoMessage() {}
func (*UpsertPredefinedPoliciesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{8}
}
func (m *UpsertPredefinedPoliciesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPredefinedPoliciesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPredefinedPoliciesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPredefinedPoliciesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPredefinedPoliciesReply.Merge(m, src)
}
func (m *UpsertPredefinedPoliciesReply) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPredefinedPoliciesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPredefinedPoliciesReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPredefinedPoliciesReply proto.InternalMessageInfo

type PolicyDTO struct {
	Id              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description     string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PpName          string                `protobuf:"bytes,3,opt,name=pp_name,json=ppName,proto3" json:"pp_name,omitempty"`
	Effect          string                `protobuf:"bytes,4,opt,name=effect,proto3" json:"effect,omitempty"`
	Subjects        []string              `protobuf:"bytes,5,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Conditions      []byte                `protobuf:"bytes,6,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Meta            []byte                `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	AttributeValues map[string]*types.Any `protobuf:"bytes,8,rep,name=attribute_values,json=attributeValues,proto3" json:"attribute_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PolicyDTO) Reset()      { *m = PolicyDTO{} }
func (*PolicyDTO) ProtoMessage() {}
func (*PolicyDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{9}
}
func (m *PolicyDTO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyDTO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyDTO.Merge(m, src)
}
func (m *PolicyDTO) XXX_Size() int {
	return m.Size()
}
func (m *PolicyDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyDTO.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyDTO proto.InternalMessageInfo

func (m *PolicyDTO) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyDTO) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicyDTO) GetPpName() string {
	if m != nil {
		return m.PpName
	}
	return ""
}

func (m *PolicyDTO) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *PolicyDTO) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *PolicyDTO) GetConditions() []byte {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *PolicyDTO) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolicyDTO) GetAttributeValues() map[string]*types.Any {
	if m != nil {
		return m.AttributeValues
	}
	return nil
}

type UpsertPoliciesUsingDTORequest struct {
	Dtos []*PolicyDTO `protobuf:"bytes,1,rep,name=dtos,proto3" json:"dtos,omitempty"`
}

func (m *UpsertPoliciesUsingDTORequest) Reset()      { *m = UpsertPoliciesUsingDTORequest{} }
func (*UpsertPoliciesUsingDTORequest) ProtoMessage() {}
func (*UpsertPoliciesUsingDTORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{10}
}
func (m *UpsertPoliciesUsingDTORequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPoliciesUsingDTORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPoliciesUsingDTORequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPoliciesUsingDTORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPoliciesUsingDTORequest.Merge(m, src)
}
func (m *UpsertPoliciesUsingDTORequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPoliciesUsingDTORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPoliciesUsingDTORequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPoliciesUsingDTORequest proto.InternalMessageInfo

func (m *UpsertPoliciesUsingDTORequest) GetDtos() []*PolicyDTO {
	if m != nil {
		return m.Dtos
	}
	return nil
}

type UpsertPoliciesUsingDTOReply struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *UpsertPoliciesUsingDTOReply) Reset()      { *m = UpsertPoliciesUsingDTOReply{} }
func (*UpsertPoliciesUsingDTOReply) ProtoMessage() {}
func (*UpsertPoliciesUsingDTOReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87ad7b13da70ceb, []int{11}
}
func (m *UpsertPoliciesUsingDTOReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPoliciesUsingDTOReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPoliciesUsingDTOReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPoliciesUsingDTOReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPoliciesUsingDTOReply.Merge(m, src)
}
func (m *UpsertPoliciesUsingDTOReply) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPoliciesUsingDTOReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPoliciesUsingDTOReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPoliciesUsingDTOReply proto.InternalMessageInfo

func (m *UpsertPoliciesUsingDTOReply) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("target.grpc.ac.AttributeType", AttributeType_name, AttributeType_value)
	proto.RegisterType((*StringAttributeValue)(nil), "target.grpc.ac.StringAttributeValue")
	proto.RegisterType((*NumberAttributeValue)(nil), "target.grpc.ac.NumberAttributeValue")
	proto.RegisterType((*BooleanAttributeValue)(nil), "target.grpc.ac.BooleanAttributeValue")
	proto.RegisterType((*Attribute)(nil), "target.grpc.ac.Attribute")
	proto.RegisterType((*ConditionOption)(nil), "target.grpc.ac.ConditionOption")
	proto.RegisterType((*Condition)(nil), "target.grpc.ac.Condition")
	proto.RegisterType((*PredefinedPolicy)(nil), "target.grpc.ac.PredefinedPolicy")
	proto.RegisterType((*UpsertPredefinedPoliciesRequest)(nil), "target.grpc.ac.UpsertPredefinedPoliciesRequest")
	proto.RegisterType((*UpsertPredefinedPoliciesReply)(nil), "target.grpc.ac.UpsertPredefinedPoliciesReply")
	proto.RegisterType((*PolicyDTO)(nil), "target.grpc.ac.PolicyDTO")
	proto.RegisterMapType((map[string]*types.Any)(nil), "target.grpc.ac.PolicyDTO.AttributeValuesEntry")
	proto.RegisterType((*UpsertPoliciesUsingDTORequest)(nil), "target.grpc.ac.UpsertPoliciesUsingDTORequest")
	proto.RegisterType((*UpsertPoliciesUsingDTOReply)(nil), "target.grpc.ac.UpsertPoliciesUsingDTOReply")
}

func init() { proto.RegisterFile("ac.proto", fileDescriptor_a87ad7b13da70ceb) }

var fileDescriptor_a87ad7b13da70ceb = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xcf, 0x38, 0xd9, 0x26, 0x7e, 0x65, 0xbb, 0xd1, 0xa8, 0x5b, 0xdc, 0xc0, 0xba, 0x91, 0x4f,
	0xd1, 0x42, 0x5d, 0x11, 0x2e, 0x2c, 0xe2, 0x92, 0x6c, 0x23, 0x54, 0x69, 0x49, 0xa2, 0xd9, 0x74,
	0xc5, 0x22, 0xa4, 0xc8, 0xb1, 0x27, 0x91, 0xc1, 0xb5, 0x67, 0x67, 0xc6, 0x08, 0x23, 0x21, 0xc1,
	0x8d, 0x23, 0x9f, 0x80, 0x33, 0xdf, 0x81, 0x2f, 0xc0, 0xb1, 0xc7, 0x3d, 0xd2, 0xf4, 0xc2, 0x71,
	0x25, 0xbe, 0x00, 0xf2, 0x38, 0x36, 0x69, 0x70, 0xba, 0xbd, 0x58, 0x33, 0xef, 0xfd, 0xde, 0x9f,
	0xdf, 0xef, 0xbd, 0x31, 0x34, 0x1c, 0xd7, 0x66, 0x3c, 0x92, 0x11, 0xde, 0x93, 0x0e, 0x5f, 0x50,
	0x69, 0x2f, 0x38, 0x73, 0x6d, 0xc7, 0x6d, 0x1d, 0x2e, 0xa2, 0x68, 0x11, 0xd0, 0x13, 0xe5, 0x9d,
	0xc5, 0xf3, 0x13, 0x27, 0x4c, 0x32, 0xa8, 0xf5, 0x21, 0xec, 0x3f, 0x97, 0xdc, 0x0f, 0x17, 0x3d,
	0x29, 0xb9, 0x3f, 0x8b, 0x25, 0x7d, 0xe1, 0x04, 0x31, 0xc5, 0xfb, 0x70, 0xef, 0xbb, 0xf4, 0x60,
	0xa0, 0x36, 0xea, 0xe8, 0x24, 0xbb, 0xa4, 0xe8, 0x61, 0x7c, 0x31, 0xa3, 0xfc, 0x36, 0x74, 0x35,
	0x47, 0x1f, 0xc3, 0xc3, 0x7e, 0x14, 0x05, 0xd4, 0x09, 0x6f, 0x83, 0x37, 0x72, 0xf8, 0x6f, 0x08,
	0xf4, 0x02, 0x88, 0x31, 0xd4, 0x42, 0xe7, 0x22, 0xaf, 0xaf, 0xce, 0xf8, 0x23, 0xa8, 0xc9, 0x84,
	0x51, 0x43, 0x6b, 0xa3, 0xce, 0x5e, 0xf7, 0x91, 0x7d, 0x93, 0xa6, 0x5d, 0x04, 0x4f, 0x12, 0x46,
	0x89, 0x82, 0xe2, 0x16, 0x34, 0x38, 0x7d, 0x15, 0xfb, 0x9c, 0x7a, 0x46, 0x55, 0x55, 0x2b, 0xee,
	0xd8, 0x86, 0xba, 0x47, 0xe7, 0x4e, 0x1c, 0x48, 0xa3, 0xd6, 0x46, 0x9d, 0xdd, 0xee, 0xbe, 0x9d,
	0x09, 0x65, 0xe7, 0x42, 0xd9, 0xbd, 0x30, 0x21, 0x39, 0xc8, 0x0a, 0xe0, 0xc1, 0xd3, 0x28, 0xf4,
	0x7c, 0xe9, 0x47, 0xe1, 0x88, 0xa5, 0x5f, 0x6c, 0x02, 0xd0, 0xef, 0x19, 0xa7, 0x42, 0xf8, 0x51,
	0xb8, 0xea, 0x75, 0xcd, 0x82, 0x9f, 0x00, 0x38, 0x79, 0x57, 0xc2, 0xd0, 0xda, 0xd5, 0xce, 0x6e,
	0xf7, 0x70, 0x6b, 0xdf, 0x64, 0x0d, 0x6c, 0x85, 0xa0, 0x17, 0xd5, 0x4a, 0xd5, 0xc0, 0x6b, 0x6a,
	0xe8, 0x2b, 0xba, 0x4f, 0xa0, 0x1e, 0xa9, 0xce, 0x84, 0x62, 0xbb, 0xdb, 0x3d, 0xda, 0x2c, 0xb6,
	0xc1, 0x80, 0xe4, 0x78, 0xeb, 0x0f, 0x04, 0xcd, 0x31, 0xa7, 0x1e, 0x9d, 0xfb, 0x21, 0xf5, 0xc6,
	0x51, 0xe0, 0xbb, 0x49, 0x69, 0xdd, 0x36, 0xec, 0x7a, 0x54, 0xb8, 0xdc, 0x57, 0x81, 0xab, 0xf2,
	0xeb, 0x26, 0xfc, 0x3e, 0xe8, 0x9c, 0x8a, 0x28, 0xe6, 0x2e, 0x4d, 0xfb, 0xa8, 0x76, 0x74, 0xf2,
	0x9f, 0x01, 0x1b, 0x50, 0x77, 0xdc, 0xac, 0xc7, 0x9a, 0xf2, 0xe5, 0xd7, 0x54, 0x2d, 0x37, 0x6f,
	0x4f, 0x18, 0xf7, 0xca, 0xd5, 0x2a, 0x08, 0x90, 0x35, 0xb0, 0x35, 0x85, 0xa3, 0x73, 0x26, 0x28,
	0x97, 0x1b, 0x14, 0x7c, 0x2a, 0x08, 0x7d, 0x15, 0x53, 0x21, 0xf1, 0x67, 0xd0, 0x60, 0x2b, 0x93,
	0x81, 0x54, 0xee, 0xf6, 0x66, 0xee, 0x4d, 0xfe, 0xa4, 0x88, 0xb0, 0x8e, 0xe0, 0xd1, 0xf6, 0x02,
	0x2c, 0x48, 0xac, 0x7f, 0x34, 0xd0, 0xb3, 0xa8, 0xd3, 0xc9, 0x08, 0xef, 0x81, 0xe6, 0x7b, 0x2b,
	0xd9, 0x34, 0xdf, 0xbb, 0x83, 0x68, 0xef, 0x42, 0x9d, 0xb1, 0xa9, 0x52, 0xbb, 0xaa, 0xbc, 0x3b,
	0x8c, 0x0d, 0x53, 0xbd, 0x0f, 0x60, 0x87, 0xce, 0xe7, 0xd4, 0xcd, 0xb6, 0x54, 0x27, 0xab, 0x5b,
	0xba, 0xda, 0x22, 0x9e, 0x7d, 0x43, 0x5d, 0x99, 0x69, 0xa5, 0x93, 0xe2, 0x9e, 0xee, 0xe5, 0x9a,
	0x92, 0x3b, 0x6d, 0xd4, 0x79, 0x67, 0x5d, 0xae, 0x74, 0xae, 0x17, 0x54, 0x3a, 0x46, 0x5d, 0x79,
	0xd4, 0x19, 0xbf, 0x84, 0x66, 0xb1, 0x7e, 0x53, 0xf5, 0x24, 0x85, 0xd1, 0x50, 0x3a, 0xd9, 0xff,
	0xd3, 0x29, 0xe7, 0x69, 0xdf, 0x7c, 0xd9, 0x62, 0x10, 0x4a, 0x9e, 0x90, 0x07, 0xce, 0x4d, 0x6b,
	0xeb, 0x4b, 0xd8, 0x2f, 0x03, 0xe2, 0x26, 0x54, 0xbf, 0xa5, 0xc9, 0x4a, 0xa6, 0xf4, 0x88, 0x1f,
	0xe7, 0xbf, 0x06, 0xed, 0x96, 0x17, 0x99, 0x41, 0x3e, 0xd5, 0x3e, 0x41, 0xd6, 0xb0, 0x18, 0xcb,
	0x6a, 0x18, 0xe7, 0xc2, 0x0f, 0x17, 0xa7, 0x93, 0x51, 0x3e, 0xf5, 0x63, 0xa8, 0x79, 0x32, 0xca,
	0x27, 0x7e, 0xb8, 0x95, 0x09, 0x51, 0x30, 0xeb, 0x04, 0xde, 0xdb, 0x96, 0x8f, 0x05, 0xaa, 0x61,
	0xdf, 0xcb, 0x92, 0xe9, 0x24, 0x3d, 0x3e, 0xfe, 0x11, 0xee, 0xdf, 0xf8, 0xef, 0xe0, 0x16, 0x1c,
	0xf4, 0x26, 0x13, 0x72, 0xd6, 0x3f, 0x9f, 0x0c, 0xa6, 0x93, 0x97, 0xe3, 0xc1, 0xf4, 0x6c, 0xf8,
	0xa2, 0xf7, 0xec, 0xec, 0xb4, 0x59, 0xc1, 0x87, 0xf0, 0x70, 0xc3, 0xf7, 0x7c, 0x42, 0xce, 0x86,
	0x9f, 0x37, 0x51, 0x89, 0x6b, 0x78, 0xfe, 0x45, 0x7f, 0x40, 0x9a, 0x5a, 0x49, 0xc6, 0xfe, 0x68,
	0xf4, 0x6c, 0xd0, 0x1b, 0x36, 0xab, 0xdd, 0x9f, 0x35, 0xb8, 0xdf, 0x73, 0x5d, 0x2a, 0xc4, 0xd3,
	0x28, 0x94, 0x3c, 0x0a, 0xf0, 0x0f, 0x60, 0x6c, 0x5b, 0x54, 0x7c, 0xb2, 0x49, 0xff, 0x2d, 0x6f,
	0xa6, 0x75, 0x7c, 0xf7, 0x80, 0x54, 0x1e, 0x09, 0x07, 0xe5, 0xea, 0xe1, 0x6d, 0x89, 0xca, 0xa7,
	0xd6, 0xfa, 0xe0, 0xae, 0x70, 0x16, 0x24, 0xfd, 0xaf, 0x2f, 0xaf, 0xcc, 0xca, 0xeb, 0x2b, 0xb3,
	0xf2, 0xe6, 0xca, 0x44, 0x3f, 0x2d, 0x4d, 0xf4, 0xfb, 0xd2, 0x44, 0x7f, 0x2e, 0x4d, 0x74, 0xb9,
	0x34, 0xd1, 0x5f, 0x4b, 0x13, 0xfd, 0xbd, 0x34, 0x2b, 0x6f, 0x96, 0x26, 0xfa, 0xf5, 0xda, 0xac,
	0x5c, 0x5e, 0x9b, 0x95, 0xd7, 0xd7, 0x66, 0x05, 0xb0, 0x1b, 0x5d, 0x6c, 0x54, 0xe9, 0xd7, 0x7b,
	0xee, 0x38, 0x5d, 0xb4, 0x31, 0xfa, 0xaa, 0xe6, 0xb8, 0x6c, 0xf6, 0x0b, 0x42, 0xb3, 0x1d, 0xb5,
	0x7a, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xab, 0xa4, 0x09, 0x06, 0x5f, 0x07, 0x00, 0x00,
}

func (x AttributeType) String() string {
	s, ok := AttributeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *StringAttributeValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringAttributeValue)
	if !ok {
		that2, ok := that.(StringAttributeValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *NumberAttributeValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NumberAttributeValue)
	if !ok {
		that2, ok := that.(NumberAttributeValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *BooleanAttributeValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BooleanAttributeValue)
	if !ok {
		that2, ok := that.(BooleanAttributeValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Attribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attribute)
	if !ok {
		that2, ok := that.(Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *ConditionOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConditionOption)
	if !ok {
		that2, ok := that.(ConditionOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Expression != that1.Expression {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	return true
}
func (this *Condition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Condition)
	if !ok {
		that2, ok := that.(Condition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PredefinedPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PredefinedPolicy)
	if !ok {
		that2, ok := that.(PredefinedPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if this.Resources[i] != that1.Resources[i] {
			return false
		}
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if this.Actions[i] != that1.Actions[i] {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPredefinedPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPredefinedPoliciesRequest)
	if !ok {
		that2, ok := that.(UpsertPredefinedPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPredefinedPoliciesReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPredefinedPoliciesReply)
	if !ok {
		that2, ok := that.(UpsertPredefinedPoliciesReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PolicyDTO) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyDTO)
	if !ok {
		that2, ok := that.(PolicyDTO)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.PpName != that1.PpName {
		return false
	}
	if this.Effect != that1.Effect {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if this.Subjects[i] != that1.Subjects[i] {
			return false
		}
	}
	if !bytes.Equal(this.Conditions, that1.Conditions) {
		return false
	}
	if !bytes.Equal(this.Meta, that1.Meta) {
		return false
	}
	if len(this.AttributeValues) != len(that1.AttributeValues) {
		return false
	}
	for i := range this.AttributeValues {
		if !this.AttributeValues[i].Equal(that1.AttributeValues[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPoliciesUsingDTORequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPoliciesUsingDTORequest)
	if !ok {
		that2, ok := that.(UpsertPoliciesUsingDTORequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dtos) != len(that1.Dtos) {
		return false
	}
	for i := range this.Dtos {
		if !this.Dtos[i].Equal(that1.Dtos[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPoliciesUsingDTOReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPoliciesUsingDTOReply)
	if !ok {
		that2, ok := that.(UpsertPoliciesUsingDTOReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *StringAttributeValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.StringAttributeValue{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NumberAttributeValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.NumberAttributeValue{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BooleanAttributeValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.BooleanAttributeValue{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attribute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&acpb.Attribute{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConditionOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&acpb.ConditionOption{")
	s = append(s, "Expression: "+fmt.Sprintf("%#v", this.Expression)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Condition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&acpb.Condition{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PredefinedPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&acpb.PredefinedPolicy{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Resources: "+fmt.Sprintf("%#v", this.Resources)+",\n")
	s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPredefinedPoliciesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.UpsertPredefinedPoliciesRequest{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPredefinedPoliciesReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&acpb.UpsertPredefinedPoliciesReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyDTO) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&acpb.PolicyDTO{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "PpName: "+fmt.Sprintf("%#v", this.PpName)+",\n")
	s = append(s, "Effect: "+fmt.Sprintf("%#v", this.Effect)+",\n")
	s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	keysForAttributeValues := make([]string, 0, len(this.AttributeValues))
	for k, _ := range this.AttributeValues {
		keysForAttributeValues = append(keysForAttributeValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributeValues)
	mapStringForAttributeValues := "map[string]*types.Any{"
	for _, k := range keysForAttributeValues {
		mapStringForAttributeValues += fmt.Sprintf("%#v: %#v,", k, this.AttributeValues[k])
	}
	mapStringForAttributeValues += "}"
	if this.AttributeValues != nil {
		s = append(s, "AttributeValues: "+mapStringForAttributeValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPoliciesUsingDTORequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.UpsertPoliciesUsingDTORequest{")
	if this.Dtos != nil {
		s = append(s, "Dtos: "+fmt.Sprintf("%#v", this.Dtos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPoliciesUsingDTOReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&acpb.UpsertPoliciesUsingDTOReply{")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessControlClient is the client API for AccessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessControlClient interface {
	UpsertPredefinedPolicies(ctx context.Context, in *UpsertPredefinedPoliciesRequest, opts ...grpc.CallOption) (*UpsertPredefinedPoliciesReply, error)
	UpsertPoliciesUsingDTO(ctx context.Context, in *UpsertPoliciesUsingDTORequest, opts ...grpc.CallOption) (*UpsertPoliciesUsingDTOReply, error)
}

type accessControlClient struct {
	cc *grpc.ClientConn
}

func NewAccessControlClient(cc *grpc.ClientConn) AccessControlClient {
	return &accessControlClient{cc}
}

func (c *accessControlClient) UpsertPredefinedPolicies(ctx context.Context, in *UpsertPredefinedPoliciesRequest, opts ...grpc.CallOption) (*UpsertPredefinedPoliciesReply, error) {
	out := new(UpsertPredefinedPoliciesReply)
	err := c.cc.Invoke(ctx, "/target.grpc.ac.AccessControl/UpsertPredefinedPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessControlClient) UpsertPoliciesUsingDTO(ctx context.Context, in *UpsertPoliciesUsingDTORequest, opts ...grpc.CallOption) (*UpsertPoliciesUsingDTOReply, error) {
	out := new(UpsertPoliciesUsingDTOReply)
	err := c.cc.Invoke(ctx, "/target.grpc.ac.AccessControl/UpsertPoliciesUsingDTO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessControlServer is the server API for AccessControl service.
type AccessControlServer interface {
	UpsertPredefinedPolicies(context.Context, *UpsertPredefinedPoliciesRequest) (*UpsertPredefinedPoliciesReply, error)
	UpsertPoliciesUsingDTO(context.Context, *UpsertPoliciesUsingDTORequest) (*UpsertPoliciesUsingDTOReply, error)
}

func RegisterAccessControlServer(s *grpc.Server, srv AccessControlServer) {
	s.RegisterService(&_AccessControl_serviceDesc, srv)
}

func _AccessControl_UpsertPredefinedPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPredefinedPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).UpsertPredefinedPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/target.grpc.ac.AccessControl/UpsertPredefinedPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).UpsertPredefinedPolicies(ctx, req.(*UpsertPredefinedPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessControl_UpsertPoliciesUsingDTO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPoliciesUsingDTORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessControlServer).UpsertPoliciesUsingDTO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/target.grpc.ac.AccessControl/UpsertPoliciesUsingDTO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessControlServer).UpsertPoliciesUsingDTO(ctx, req.(*UpsertPoliciesUsingDTORequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "target.grpc.ac.AccessControl",
	HandlerType: (*AccessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPredefinedPolicies",
			Handler:    _AccessControl_UpsertPredefinedPolicies_Handler,
		},
		{
			MethodName: "UpsertPoliciesUsingDTO",
			Handler:    _AccessControl_UpsertPoliciesUsingDTO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ac.proto",
}

func (m *StringAttributeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringAttributeValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *NumberAttributeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumberAttributeValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAc(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *BooleanAttributeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanAttributeValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value {
		dAtA[i] = 0x8
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAc(dAtA, i, uint64(m.Type))
	}
	if m.Required {
		dAtA[i] = 0x18
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Default != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAc(dAtA, i, uint64(m.Default.Size()))
		n1, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ConditionOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConditionOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expression) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Expression)))
		i += copy(dAtA[i:], m.Expression)
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAc(dAtA, i, uint64(m.Options.Size()))
		n2, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PredefinedPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredefinedPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Resources) > 0 {
		for _, s := range m.Resources {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpsertPredefinedPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPredefinedPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpsertPredefinedPoliciesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPredefinedPoliciesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PolicyDTO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyDTO) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.PpName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.PpName)))
		i += copy(dAtA[i:], m.PpName)
	}
	if len(m.Effect) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Effect)))
		i += copy(dAtA[i:], m.Effect)
	}
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Conditions) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Conditions)))
		i += copy(dAtA[i:], m.Conditions)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAc(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if len(m.AttributeValues) > 0 {
		for k, _ := range m.AttributeValues {
			dAtA[i] = 0x42
			i++
			v := m.AttributeValues[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAc(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAc(uint64(len(k))) + msgSize
			i = encodeVarintAc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAc(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *UpsertPoliciesUsingDTORequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPoliciesUsingDTORequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dtos) > 0 {
		for _, msg := range m.Dtos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpsertPoliciesUsingDTOReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPoliciesUsingDTOReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintAc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StringAttributeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	return n
}

func (m *NumberAttributeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovAc(uint64(m.Value))
	}
	return n
}

func (m *BooleanAttributeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAc(uint64(m.Type))
	}
	if m.Required {
		n += 2
	}
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovAc(uint64(l))
	}
	return n
}

func (m *ConditionOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAc(uint64(l))
		}
	}
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovAc(uint64(l))
	}
	return n
}

func (m *PredefinedPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if len(m.Resources) > 0 {
		for _, s := range m.Resources {
			l = len(s)
			n += 1 + l + sovAc(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovAc(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovAc(uint64(l))
		}
	}
	return n
}

func (m *UpsertPredefinedPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovAc(uint64(l))
		}
	}
	return n
}

func (m *UpsertPredefinedPoliciesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PolicyDTO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.PpName)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.Effect)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			l = len(s)
			n += 1 + l + sovAc(uint64(l))
		}
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovAc(uint64(l))
	}
	if len(m.AttributeValues) > 0 {
		for k, v := range m.AttributeValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpsertPoliciesUsingDTORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dtos) > 0 {
		for _, e := range m.Dtos {
			l = e.Size()
			n += 1 + l + sovAc(uint64(l))
		}
	}
	return n
}

func (m *UpsertPoliciesUsingDTOReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovAc(uint64(l))
		}
	}
	return n
}

func sovAc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAc(x uint64) (n int) {
	return sovAc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StringAttributeValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringAttributeValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NumberAttributeValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NumberAttributeValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BooleanAttributeValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanAttributeValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attribute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attribute{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConditionOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConditionOption{`,
		`Expression:` + fmt.Sprintf("%v", this.Expression) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "Attribute", "Attribute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Condition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Condition{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "ConditionOption", "ConditionOption", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PredefinedPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PredefinedPolicy{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Resources:` + fmt.Sprintf("%v", this.Resources) + `,`,
		`Actions:` + fmt.Sprintf("%v", this.Actions) + `,`,
		`Conditions:` + strings.Replace(fmt.Sprintf("%v", this.Conditions), "Condition", "Condition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPredefinedPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPredefinedPoliciesRequest{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "PredefinedPolicy", "PredefinedPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPredefinedPoliciesReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPredefinedPoliciesReply{`,
		`}`,
	}, "")
	return s
}
func (this *PolicyDTO) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributeValues := make([]string, 0, len(this.AttributeValues))
	for k, _ := range this.AttributeValues {
		keysForAttributeValues = append(keysForAttributeValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributeValues)
	mapStringForAttributeValues := "map[string]*types.Any{"
	for _, k := range keysForAttributeValues {
		mapStringForAttributeValues += fmt.Sprintf("%v: %v,", k, this.AttributeValues[k])
	}
	mapStringForAttributeValues += "}"
	s := strings.Join([]string{`&PolicyDTO{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`PpName:` + fmt.Sprintf("%v", this.PpName) + `,`,
		`Effect:` + fmt.Sprintf("%v", this.Effect) + `,`,
		`Subjects:` + fmt.Sprintf("%v", this.Subjects) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Meta:` + fmt.Sprintf("%v", this.Meta) + `,`,
		`AttributeValues:` + mapStringForAttributeValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPoliciesUsingDTORequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPoliciesUsingDTORequest{`,
		`Dtos:` + strings.Replace(fmt.Sprintf("%v", this.Dtos), "PolicyDTO", "PolicyDTO", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPoliciesUsingDTOReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPoliciesUsingDTOReply{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StringAttributeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringAttributeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringAttributeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumberAttributeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumberAttributeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumberAttributeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanAttributeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanAttributeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanAttributeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AttributeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &types.Any{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConditionOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConditionOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConditionOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ConditionOption{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredefinedPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredefinedPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredefinedPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPredefinedPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPredefinedPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPredefinedPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &PredefinedPolicy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPredefinedPoliciesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPredefinedPoliciesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPredefinedPoliciesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyDTO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyDTO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyDTO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions[:0], dAtA[iNdEx:postIndex]...)
			if m.Conditions == nil {
				m.Conditions = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributeValues == nil {
				m.AttributeValues = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributeValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPoliciesUsingDTORequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPoliciesUsingDTORequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPoliciesUsingDTORequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtos = append(m.Dtos, &PolicyDTO{})
			if err := m.Dtos[len(m.Dtos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPoliciesUsingDTOReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPoliciesUsingDTOReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPoliciesUsingDTOReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAc   = fmt.Errorf("proto: integer overflow")
)
