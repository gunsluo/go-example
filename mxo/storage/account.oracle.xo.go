// Package storage contains the types for schema.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"fmt"
	"strconv"
	"strings"
)

// InsertAccount inserts the Account to the database.
func (s *GodrorStorage) InsertAccount(db XODB, a *Account) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "AC"."account" (` +
		`"subject", "email", "name", "label", "created_date", "changed_date", "deleted_date"` +
		`) VALUES (` +
		`:1, :2, :3, :4, :5, :6, :7` +
		`) RETURNING "id" INTO :8`

	// run query
	s.Logger.Info(sqlstr, a.Subject, a.Email, a.Name, a.Label, a.CreatedDate, a.ChangedDate, a.DeletedDate)
	_, err = db.Exec(sqlstr, RealOracleEmptyString(a.Subject), RealOracleEmptyString(a.Email), RealOracleEmptyString(a.Name), RealOracleNullString(a.Label), a.CreatedDate, a.ChangedDate, a.DeletedDate, sql.Out{Dest: &a.ID})
	if err != nil {
		return err
	}

	return nil
}

// InsertAccountByFields inserts the Account to the database.
func (s *GodrorStorage) InsertAccountByFields(db XODB, a *Account) error {
	var err error

	params := make([]interface{}, 0, 7)
	fields := make([]string, 0, 7)
	retFields := make([]string, 0, 7)
	retFields = append(retFields, `"id"`)
	retVars := make([]interface{}, 0, 7)
	retVars = append(retVars, sql.Out{Dest: &a.ID})

	fields = append(fields, `"subject"`)
	params = append(params, RealOracleEmptyString(a.Subject))

	fields = append(fields, `"email"`)
	params = append(params, RealOracleEmptyString(a.Email))

	fields = append(fields, `"name"`)
	params = append(params, RealOracleEmptyString(a.Name))

	if a.Label.Valid {
		fields = append(fields, `"label"`)
		params = append(params, RealOracleNullString(a.Label))

	} else {
		retFields = append(retFields, `"label"`)
		retVars = append(retVars, sql.Out{Dest: &a.Label.String})

	}
	if a.CreatedDate.Valid {
		fields = append(fields, `"created_date"`)
		params = append(params, a.CreatedDate)

	} else {
		retFields = append(retFields, `"created_date"`)
		retVars = append(retVars, sql.Out{Dest: &a.CreatedDate})

	}
	if a.ChangedDate.Valid {
		fields = append(fields, `"changed_date"`)
		params = append(params, a.ChangedDate)

	} else {
		retFields = append(retFields, `"changed_date"`)
		retVars = append(retVars, sql.Out{Dest: &a.ChangedDate})

	}
	if a.DeletedDate.Valid {
		fields = append(fields, `"deleted_date"`)
		params = append(params, a.DeletedDate)

	} else {
		retFields = append(retFields, `"deleted_date"`)
		retVars = append(retVars, sql.Out{Dest: &a.DeletedDate})

	}

	if len(params) == 0 {
		// FIXME(jackie): maybe we should allow this?
		return errors.New("all fields are empty, unable to insert")
	}
	params = append(params, retVars...)

	var fieldsPlaceHolders []string
	for i := range fields {
		fieldsPlaceHolders = append(fieldsPlaceHolders, ":"+strconv.Itoa(i+1))
	}
	var retFieldsPlaceHolders []string
	for i := range retFields {
		retFieldsPlaceHolders = append(retFieldsPlaceHolders, ":"+strconv.Itoa(len(fieldsPlaceHolders)+i+1))
	}

	sqlstr := `INSERT INTO "AC"."account" (` +
		strings.Join(fields, ",") +
		`) VALUES (` + strings.Join(fieldsPlaceHolders, ",") +
		`) RETURNING ` + strings.Join(retFields, ",") +
		` INTO ` + strings.Join(retFieldsPlaceHolders, ",")

	// run query
	s.Logger.Info(sqlstr, params)
	_, err = db.Exec(sqlstr, params...)
	if err != nil {
		return err
	}
	FixRealOracleEmptyString(&a.Subject)
	FixRealOracleEmptyString(&a.Email)
	FixRealOracleEmptyString(&a.Name)

	if !a.Label.Valid {
		FixRealOracleNullString(&a.Label)
	}

	return nil
}

// UpdateAccount updates the Account in the database.
func (s *GodrorStorage) UpdateAccount(db XODB, a *Account) error {
	var err error

	// sql query
	const sqlstr = `UPDATE "AC"."account" SET ` +
		`"subject" = :1, "email" = :2, "name" = :3, "label" = :4, "created_date" = :5, "changed_date" = :6, "deleted_date" = :7` +
		` WHERE "id" = :8`

	// run query
	s.Logger.Info(sqlstr, a.Subject, a.Email, a.Name, a.Label, a.CreatedDate, a.ChangedDate, a.DeletedDate, a.ID)
	_, err = db.Exec(sqlstr, RealOracleEmptyString(a.Subject), RealOracleEmptyString(a.Email), RealOracleEmptyString(a.Name), RealOracleNullString(a.Label), a.CreatedDate, a.ChangedDate, a.DeletedDate, a.ID)
	return err
}

// UpdateAccountByFields updates the Account in the database.
func (s *GodrorStorage) UpdateAccountByFields(db XODB, a *Account, fields, retCols []string, params, retVars []interface{}) error {
	if len(fields) == 0 {
		return nil
	}

	if len(fields) != len(params) {
		return errors.New("fields length is not equal params length")
	}

	if len(retCols) != len(retVars) {
		return errors.New("retCols length is not equal retVars length")
	}

	var setstr string
	var idxvals []interface{}
	var oparams []interface{}
	for i, field := range fields {
		if i != 0 {
			setstr += ", "
		}
		setstr += field + ` = :%d`
		idxvals = append(idxvals, i+1)
		switch v := (params[i]).(type) {
		case string:
			oparams = append(oparams, RealOracleEmptyString(v))
		case sql.NullString:
			oparams = append(oparams, RealOracleNullString(v))
		default:
			oparams = append(oparams, v)
		}

	}
	id := a.ID

	oparams = append(oparams, id)
	idxvals = append(idxvals, len(oparams))
	var sqlstr = fmt.Sprintf(`UPDATE "AC"."account" SET `+setstr+` WHERE "id" = :%d`, idxvals...)
	s.Logger.Info(sqlstr, params, id)
	if _, err := db.Exec(sqlstr, oparams...); err != nil {
		return err
	}

	if len(retCols) > 0 {
		err := db.QueryRow(`SELECT `+strings.Join(retCols, ",")+` from "AC"."account" WHERE "id" = :1`, id).Scan(retVars...)
		if err != nil {
			return err
		}
		for _, val := range retVars {
			switch v := val.(type) {
			case *string:
				FixRealOracleEmptyString(v)
			case *sql.NullString:
				FixRealOracleNullString(v)
			}
		}
	}

	return nil
}

// SaveAccount saves the Account to the database.
func (s *GodrorStorage) SaveAccount(db XODB, a *Account) error {

	return s.InsertAccount(db, a)
}

// UpsertAccount performs an upsert for Account.
func (s *GodrorStorage) UpsertAccount(db XODB, a *Account) error {
	var err error

	// sql query

	const sqlstr = `MERGE INTO "AC"."account" t ` +
		`USING (SELECT :1 AS "id", :2 AS "subject", :3 AS "email", :4 AS "name", :5 AS "label", :6 AS "created_date", :7 AS "changed_date", :8 AS "deleted_date" FROM dual) s ` +
		`ON (t."id" = s."id") ` +
		`WHEN MATCHED THEN UPDATE SET "subject" = s."subject", "email" = s."email", "name" = s."name", "label" = s."label", "created_date" = s."created_date", "changed_date" = s."changed_date", "deleted_date" = s."deleted_date" ` +
		`WHEN NOT MATCHED THEN INSERT ("subject", "email", "name", "label", "created_date", "changed_date", "deleted_date") VALUES (s."subject", s."email", s."name", s."label", s."created_date", s."changed_date", s."deleted_date")`

	// run query
	s.Logger.Info(sqlstr, a.ID, a.Subject, a.Email, a.Name, a.Label, a.CreatedDate, a.ChangedDate, a.DeletedDate)
	_, err = db.Exec(sqlstr, a.ID, RealOracleEmptyString(a.Subject), RealOracleEmptyString(a.Email), RealOracleEmptyString(a.Name), RealOracleNullString(a.Label), a.CreatedDate, a.ChangedDate, a.DeletedDate)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAccount deletes the Account from the database.
func (s *GodrorStorage) DeleteAccount(db XODB, a *Account) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM "AC"."account" WHERE "id" = :1`

	// run query
	s.Logger.Info(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	return nil
}

// DeleteAccounts deletes the Account from the database.
func (s *GodrorStorage) DeleteAccounts(db XODB, as []*Account) error {
	var err error

	if len(as) == 0 {
		return nil
	}

	var args []interface{}
	var placeholder string
	for i, a := range as {
		args = append(args, a.ID)
		if i != 0 {
			placeholder = placeholder + ", "
		}
		placeholder += fmt.Sprintf(":%d", i+1)
	}

	// sql query
	var sqlstr = `DELETE FROM "AC"."account" WHERE "id" in (` + placeholder + `)`

	// run query
	s.Logger.Info(sqlstr, args)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	return nil
}

// GetMostRecentAccount returns n most recent rows from 'account',
// ordered by "created_date" in descending order.
func (s *GodrorStorage) GetMostRecentAccount(db XODB, n int) ([]*Account, error) {
	const sqlstr = `SELECT ` +
		`"id", "subject", "email", "name", "label", "created_date", "changed_date", "deleted_date" ` +
		`FROM "AC"."account" ` +
		`ORDER BY "created_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.Logger.Info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Account
	for q.Next() {
		a := Account{}

		// scan
		err = q.Scan(&a.ID, &a.Subject, &a.Email, &a.Name, &a.Label, &a.CreatedDate, &a.ChangedDate, &a.DeletedDate)
		if err != nil {
			return nil, err
		}
		FixRealOracleEmptyString(&a.Subject)
		FixRealOracleEmptyString(&a.Email)
		FixRealOracleEmptyString(&a.Name)

		FixRealOracleNullString(&a.Label)

		res = append(res, &a)
	}

	return res, nil
}

// GetMostRecentChangedAccount returns n most recent rows from 'account',
// ordered by "changed_date" in descending order.
func (s *GodrorStorage) GetMostRecentChangedAccount(db XODB, n int) ([]*Account, error) {
	const sqlstr = `SELECT ` +
		`"id", "subject", "email", "name", "label", "created_date", "changed_date", "deleted_date" ` +
		`FROM "AC"."account" ` +
		`ORDER BY "changed_date" DESC FETCH NEXT :1 ROWS ONLY`

	s.Logger.Info(sqlstr, n)
	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Account
	for q.Next() {
		a := Account{}

		// scan
		err = q.Scan(&a.ID, &a.Subject, &a.Email, &a.Name, &a.Label, &a.CreatedDate, &a.ChangedDate, &a.DeletedDate)
		if err != nil {
			return nil, err
		}
		FixRealOracleEmptyString(&a.Subject)
		FixRealOracleEmptyString(&a.Email)
		FixRealOracleEmptyString(&a.Name)

		FixRealOracleNullString(&a.Label)

		res = append(res, &a)
	}

	return res, nil
}

// GetAllAccount returns all rows from 'account', based on the AccountQueryArguments.
// If the AccountQueryArguments is nil, it will use the default AccountQueryArguments instead.
func (s *GodrorStorage) GetAllAccount(db XODB, queryArgs *AccountQueryArguments) ([]*Account, error) { // nolint: gocyclo
	queryArgs = ApplyAccountQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getAccountFilter(queryArgs.Where)
		if err != nil {
			return nil, fmt.Errorf("unable to get Account filter, %w", err)
		}
		queryArgs.filterArgs = filterArgs
	}

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	orderBy := "id"
	foundIndex := false
	dbFields := map[string]bool{
		"id":           true,
		"subject":      true,
		"email":        true,
		"name":         true,
		"label":        true,
		"created_date": true,
		"changed_date": true,
		"deleted_date": true,
	}

	if *queryArgs.OrderBy != "" && *queryArgs.OrderBy != defaultOrderBy {
		foundIndex = dbFields[*queryArgs.OrderBy]
		if !foundIndex {
			return nil, fmt.Errorf("unable to order by %s, field not found", *queryArgs.OrderBy)
		}
		orderBy = *queryArgs.OrderBy
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}
	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s" %s OFFSET :%d ROWS FETCH NEXT :%d ROWS ONLY`,
		`"id", "subject", "email", "name", "label", "created_date", "changed_date", "deleted_date" `,
		`"AC"."account"`,
		placeHolders,
		dead,
		orderBy,
		desc,
		offsetPos,
		limitPos)
	s.Logger.Info(sqlstr, params)

	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Account
	for q.Next() {
		a := Account{}

		// scan
		err = q.Scan(&a.ID, &a.Subject, &a.Email, &a.Name, &a.Label, &a.CreatedDate, &a.ChangedDate, &a.DeletedDate)
		if err != nil {
			return nil, err
		}
		FixRealOracleEmptyString(&a.Subject)
		FixRealOracleEmptyString(&a.Email)
		FixRealOracleEmptyString(&a.Name)

		FixRealOracleNullString(&a.Label)

		res = append(res, &a)
	}

	return res, nil
}

// CountAllAccount returns a count of all rows from 'account'
func (s *GodrorStorage) CountAllAccount(db XODB, queryArgs *AccountQueryArguments) (int, error) {
	queryArgs = ApplyAccountQueryArgsDefaults(queryArgs)
	if queryArgs.filterArgs == nil {
		filterArgs, err := getAccountFilter(queryArgs.Where)
		if err != nil {
			return 0, fmt.Errorf("unable to get Account filter, %w", err)
		}
		queryArgs.filterArgs = filterArgs
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	if queryArgs.filterArgs != nil {
		pls := make([]string, len(queryArgs.filterArgs.filterPairs))
		for i, pair := range queryArgs.filterArgs.filterPairs {
			pls[i] = fmt.Sprintf("%s %s :%d", pair.fieldName, pair.option, i+1)
			params = append(params, pair.value)
		}
		placeHolders = strings.Join(pls, " "+queryArgs.filterArgs.conjunction+" ")
		placeHolders = fmt.Sprintf("(%s) AND", placeHolders)
	}

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "AC"."account" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.Logger.Info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// AccountByID retrieves a row from '"AC"."account"' as a Account.
//
// Generated from index 'ACCOUNT_PK'.
func (s *GodrorStorage) AccountByID(db XODB, id int) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "subject", "email", "name", "label", "created_date", "changed_date", "deleted_date" ` +
		`FROM "AC"."account" ` +
		`WHERE "id" = :1`

	// run query
	s.Logger.Info(sqlstr, id)
	a := Account{}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Subject, &a.Email, &a.Name, &a.Label, &a.CreatedDate, &a.ChangedDate, &a.DeletedDate)
	if err != nil {
		return nil, err
	}
	FixRealOracleEmptyString(&a.Subject)
	FixRealOracleEmptyString(&a.Email)
	FixRealOracleEmptyString(&a.Name)

	FixRealOracleNullString(&a.Label)

	return &a, nil
}

// AccountBySubject retrieves a row from '"AC"."account"' as a Account.
//
// Generated from index 'ACCOUNT_SUBJECT_UNIQUE_INDEX'.
func (s *GodrorStorage) AccountBySubject(db XODB, subject string) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "subject", "email", "name", "label", "created_date", "changed_date", "deleted_date" ` +
		`FROM "AC"."account" ` +
		`WHERE "subject" = :1`

	// run query
	s.Logger.Info(sqlstr, subject)
	a := Account{}

	err = db.QueryRow(sqlstr, subject).Scan(&a.ID, &a.Subject, &a.Email, &a.Name, &a.Label, &a.CreatedDate, &a.ChangedDate, &a.DeletedDate)
	if err != nil {
		return nil, err
	}
	FixRealOracleEmptyString(&a.Subject)
	FixRealOracleEmptyString(&a.Email)
	FixRealOracleEmptyString(&a.Name)

	FixRealOracleNullString(&a.Label)

	return &a, nil
}
