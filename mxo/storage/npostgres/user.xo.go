// Package postgres contains the types for schema 'public'.
package postgres

import (
	"errors"

	"github.com/gunsluo/go-example/mxo/storage"
)

/*
// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/lib/pq"
)

// User represents a row from 'public.user'.
type User struct {
	ID          int         `json:"id"`           // id
	Subject     string      `json:"subject"`      // subject
	CreatedDate pq.NullTime `json:"created_date"` // created_date
	ChangedDate pq.NullTime `json:"changed_date"` // changed_date
	DeletedDate pq.NullTime `json:"deleted_date"` // deleted_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.user (` +
		`subject, created_date, changed_date, deleted_date` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	err = db.QueryRow(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user SET (` +
		`subject, created_date, changed_date, deleted_date` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	_, err = db.Exec(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user (` +
		`id, subject, created_date, changed_date, deleted_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, subject, created_date, changed_date, deleted_date` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.subject, EXCLUDED.created_date, EXCLUDED.changed_date, EXCLUDED.deleted_date` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	_, err = db.Exec(sqlstr, u.ID, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByID retrieves a row from 'public.user' as a User.
//
// Generated from index 'user_pk'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject, created_date, changed_date, deleted_date ` +
		`FROM public.user ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Subject, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserBySubject retrieves a row from 'public.user' as a User.
//
// Generated from index 'user_subject_unique_index'.
func UserBySubject(db XODB, subject string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject, created_date, changed_date, deleted_date ` +
		`FROM public.user ` +
		`WHERE subject = $1`

	// run query
	XOLog(sqlstr, subject)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subject).Scan(&u.ID, &u.Subject, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
*/

func (s *PostgresStorage) UserByID(db storage.XODB, id int) (*storage.User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject, created_date, changed_date, deleted_date ` +
		`FROM public.user ` +
		`WHERE id = $1`

	// run query
	//XOLog(sqlstr, id)
	u := storage.User{}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Subject, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// Insert inserts the User to the database.
func (s *PostgresStorage) InsertUser(db storage.XODB, u *storage.User) error {
	var err error

	// if already exist, bail
	if u.Exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.user (` +
		`subject, created_date, changed_date, deleted_date` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	//XOLog(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	err = db.QueryRow(sqlstr, u.Subject, u.CreatedDate, u.ChangedDate, u.DeletedDate).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u.Exists = true

	return nil
}
