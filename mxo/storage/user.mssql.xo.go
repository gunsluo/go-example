// Package storage contains the types for schema 'dbo'.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// InsertUser inserts the User to the database.
func (s *MssqlStorage) InsertUser(db XODB, u *User) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by identity
	const sqlstr = `INSERT INTO "dbo"."user" (` +
		`"subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) OUTPUT INSERTED.ID VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	err = db.QueryRow(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set primary key and existence
	u._exists = true

	return nil
}

// UpdateUser updates the User in the database.
func (s *MssqlStorage) UpdateUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "dbo"."user" SET ` +
		`"subject" = $1, "name" = $2, "created_date" = $3, "changed_date" = $4, "deleted_date" = $5` +
		` WHERE "id" = $6`

	// run query
	XOLog(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	_, err = db.Exec(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	return err
}

// SaveUser saves the User to the database.
func (s *MssqlStorage) SaveUser(db XODB, u *User) error {
	if u.Exists() {
		return s.UpdateUser(db, u)
	}

	return s.InsertUser(db, u)
}

// UpsertUser performs an upsert for User.
func (s *MssqlStorage) UpsertUser(db XODB, u *User) error {
	var err error

	// sql query

	const sqlstr = `MERGE "dbo"."user" AS t ` +
		`USING (SELECT $1 AS "id", $2 AS "subject", $3 AS "name", $4 AS "created_date", $5 AS "changed_date", $6 AS "deleted_date") AS s ` +
		`ON t."id" = s."id" ` +
		`WHEN MATCHED THEN UPDATE SET "subject" = s."subject", "name" = s."name", "created_date" = s."created_date", "changed_date" = s."changed_date", "deleted_date" = s."deleted_date" ` +
		`WHEN NOT MATCHED THEN INSERT ("subject", "name", "created_date", "changed_date", "deleted_date") VALUES (s."subject", s."name", s."created_date", s."changed_date", s."deleted_date");`

	// run query
	XOLog(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	_, err = db.Exec(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// DeleteUser deletes the User from the database.
func (s *MssqlStorage) DeleteUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "dbo"."user" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// AccountByUserSubject returns the Account associated with the User's Subject (subject).
//
// Generated from foreign key 'user_account_subject_fk'.
func (s *MssqlStorage) AccountByUserSubject(db XODB, u *User) (*Account, error) {
	return s.AccountBySubject(db, u.Subject)
}

// UserByID retrieves a row from '"dbo"."user"' as a User.
//
// Generated from index 'PK__user__3213E83FFC9E23DD'.
func (s *MssqlStorage) UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date" ` +
		`FROM "dbo"."user" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
