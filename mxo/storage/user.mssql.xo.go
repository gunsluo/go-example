// Package storage contains the types for schema.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/pkg/errors"
)

// InsertUser inserts the User to the database.
func (s *MssqlStorage) InsertUser(db XODB, u *User) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by identity
	const sqlstr = `INSERT INTO "dbo"."user" (` +
		`"subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) OUTPUT INSERTED.ID VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	s.info(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	err = db.QueryRow(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set primary key and existence
	u._exists = true

	return nil
}

// InsertUserByFields inserts the User to the database.
func (s *MssqlStorage) InsertUserByFields(db XODB, u *User) error {
	var err error

	params := make([]interface{}, 0, 5)
	fields := make([]string, 0, 5)
	retCols := `INSERTED."id"`
	retVars := make([]interface{}, 0, 5)
	retVars = append(retVars, &u.ID)

	fields = append(fields, `"subject"`)
	params = append(params, u.Subject)
	if u.Name.Valid {
		fields = append(fields, `"name"`)
		params = append(params, u.Name)
	} else {
		retCols += `, INSERTED."name"`
		retVars = append(retVars, &u.Name)
	}
	if u.CreatedDate.Valid {
		fields = append(fields, `"created_date"`)
		params = append(params, u.CreatedDate)
	} else {
		retCols += `, INSERTED."created_date"`
		retVars = append(retVars, &u.CreatedDate)
	}
	if u.ChangedDate.Valid {
		fields = append(fields, `"changed_date"`)
		params = append(params, u.ChangedDate)
	} else {
		retCols += `, INSERTED."changed_date"`
		retVars = append(retVars, &u.ChangedDate)
	}
	if u.DeletedDate.Valid {
		fields = append(fields, `"deleted_date"`)
		params = append(params, u.DeletedDate)
	} else {
		retCols += `, INSERTED."deleted_date"`
		retVars = append(retVars, &u.DeletedDate)
	}
	if len(params) == 0 {
		// FIXME(jackie): maybe we should allow this?
		return errors.New("all fields are empty, unable to insert")
	}

	var placeHolders []string
	var placeHolderVals []interface{}
	for i := range params {
		placeHolders = append(placeHolders, "$%d")
		placeHolderVals = append(placeHolderVals, i+1)
	}
	placeHolderStr := fmt.Sprintf(strings.Join(placeHolders, ","), placeHolderVals...)

	sqlstr := `INSERT INTO "dbo"."user" (` +
		strings.Join(fields, ",") +
		`) OUTPUT ` + retCols +
		` VALUES (` + placeHolderStr + `)`

	s.info(sqlstr, params)
	err = db.QueryRow(sqlstr, params...).Scan(retVars...)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// UpdateUser updates the User in the database.
func (s *MssqlStorage) UpdateUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "dbo"."user" SET ` +
		`"subject" = $1, "name" = $2, "created_date" = $3, "changed_date" = $4, "deleted_date" = $5` +
		` WHERE "id" = $6`

	// run query
	s.info(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	_, err = db.Exec(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	return err
}

// UpdateUserByFields updates the User in the database.
func (s *MssqlStorage) UpdateUserByFields(db XODB, u *User, fields, retCols []string, params, retVars []interface{}) error {
	var setstr string
	var idxvals []interface{}
	for i, field := range fields {
		if i != 0 {
			setstr += ", "
		}
		setstr += field + ` = $%d`
		idxvals = append(idxvals, i+1)
	}

	var retstr string
	for i, retCol := range retCols {
		if i != 0 {
			retstr += ", "
		}
		retstr += "INSERTED." + retCol
	}

	params = append(params, u.ID)
	idxvals = append(idxvals, len(params))
	var sqlstr = fmt.Sprintf(`UPDATE "dbo"."user" SET `+
		setstr+` OUTPUT `+retstr+
		` WHERE "id" = $%d`, idxvals...)
	s.info(sqlstr, params)
	if err := db.QueryRow(sqlstr, params...).Scan(retVars...); err != nil {
		return err
	}

	return nil
}

// SaveUser saves the User to the database.
func (s *MssqlStorage) SaveUser(db XODB, u *User) error {
	if u.Exists() {
		return s.UpdateUser(db, u)
	}

	return s.InsertUser(db, u)
}

// UpsertUser performs an upsert for User.
func (s *MssqlStorage) UpsertUser(db XODB, u *User) error {
	var err error

	// sql query

	const sqlstr = `MERGE "dbo"."user" AS t ` +
		`USING (SELECT $1 AS "id", $2 AS "subject", $3 AS "name", $4 AS "created_date", $5 AS "changed_date", $6 AS "deleted_date") AS s ` +
		`ON t."id" = s."id" ` +
		`WHEN MATCHED THEN UPDATE SET "subject" = s."subject", "name" = s."name", "created_date" = s."created_date", "changed_date" = s."changed_date", "deleted_date" = s."deleted_date" ` +
		`WHEN NOT MATCHED THEN INSERT ("subject", "name", "created_date", "changed_date", "deleted_date") VALUES (s."subject", s."name", s."created_date", s."changed_date", s."deleted_date");`

	// run query
	s.info(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	_, err = db.Exec(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// DeleteUser deletes the User from the database.
func (s *MssqlStorage) DeleteUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "dbo"."user" WHERE "id" = $1`

	// run query
	s.info(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// DeleteUsers deletes the User from the database.
func (s *MssqlStorage) DeleteUsers(db XODB, us []*User) error {
	var err error

	if len(us) == 0 {
		return nil
	}

	var args []interface{}
	var placeholder string
	for i, u := range us {
		args = append(args, u.ID)
		if i != 0 {
			placeholder = placeholder + ", "
		}
		placeholder += fmt.Sprintf("$%d", i+1)
	}

	// sql query
	var sqlstr = `DELETE FROM "dbo"."user" WHERE "id" in (` + placeholder + `)`

	// run query
	s.info(sqlstr, args)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	// set deleted
	for _, u := range us {
		u._deleted = true
	}

	return nil
}

// GetMostRecentUser returns n most recent rows from 'user',
// ordered by "created_date" in descending order.
func (s *MssqlStorage) GetMostRecentUser(db XODB, n int) ([]*User, error) {
	var sqlstr = `SELECT TOP ` + strconv.Itoa(n) +
		` "id", "subject", "name", "created_date", "changed_date", "deleted_date" ` +
		`FROM "dbo"."user" ` +
		`ORDER BY "created_date" DESC`

	s.info(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// GetMostRecentChangedUser returns n most recent rows from 'user',
// ordered by "changed_date" in descending order.
func (s *MssqlStorage) GetMostRecentChangedUser(db XODB, n int) ([]*User, error) {
	var sqlstr = `SELECT TOP ` + strconv.Itoa(n) +
		` "id", "subject", "name", "created_date", "changed_date", "deleted_date" ` +
		`FROM "dbo"."user" ` +
		`ORDER BY "changed_date" DESC`

	s.info(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// GetAllUser returns all rows from 'user', based on the UserQueryArguments.
// If the UserQueryArguments is nil, it will use the default UserQueryArguments instead.
func (s *MssqlStorage) GetAllUser(db XODB, queryArgs *UserQueryArguments) ([]*User, error) { // nolint: gocyclo
	queryArgs = ApplyUserQueryArgsDefaults(queryArgs)

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	orderBy := "id"
	foundIndex := false
	dbFields := map[string]bool{
		"id":           true,
		"subject":      true,
		"name":         true,
		"created_date": true,
		"changed_date": true,
		"deleted_date": true,
	}

	if *queryArgs.OrderBy != "" && *queryArgs.OrderBy != defaultOrderBy {
		foundIndex = dbFields[*queryArgs.OrderBy]
		if !foundIndex {
			return nil, fmt.Errorf("unable to order by %s, field not found", *queryArgs.OrderBy)
		}
		orderBy = *queryArgs.OrderBy
	}

	var params []interface{}
	placeHolders := ""
	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s"  %s OFFSET $%d ROWS FETCH NEXT $%d ROWS ONLY`,
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date" `,
		`"dbo"."user"`,
		placeHolders,
		dead,
		orderBy,
		desc,
		offsetPos,
		limitPos)
	s.info(sqlstr, params)

	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// CountAllUser returns a count of all rows from 'user'
func (s *MssqlStorage) CountAllUser(db XODB, queryArgs *UserQueryArguments) (int, error) {
	queryArgs = ApplyUserQueryArgsDefaults(queryArgs)

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "dbo"."user" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// UsersBySubjectFK retrieves rows from "dbo"."user" by foreign key Subject.
// Generated from foreign key Account.
func (s *MssqlStorage) UsersBySubjectFK(db XODB, subject string, queryArgs *UserQueryArguments) ([]*User, error) {
	queryArgs = ApplyUserQueryArgsDefaults(queryArgs)

	desc := ""
	if *queryArgs.Desc {
		desc = "DESC"
	}

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	params = append(params, subject)
	placeHolders = fmt.Sprintf(`%s "subject" = $%d AND `, placeHolders, len(params))

	params = append(params, *queryArgs.Offset)
	offsetPos := len(params)

	params = append(params, *queryArgs.Limit)
	limitPos := len(params)

	var sqlstr = fmt.Sprintf(
		`SELECT %s FROM %s WHERE %s "deleted_date" IS %s ORDER BY "%s" %s OFFSET $%d ROWS FETCH NEXT $%d ROWS ONLY`,
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date" `,
		`"dbo"."user"`,
		placeHolders,
		dead,
		"id",
		desc,
		offsetPos,
		limitPos)

	s.info(sqlstr, params...)
	q, err := db.Query(sqlstr, params...)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// CountUsersBySubjectFK count rows from "dbo"."user" by foreign key Subject.
// Generated from foreign key Account.
func (s *MssqlStorage) CountUsersBySubjectFK(db XODB, subject string, queryArgs *UserQueryArguments) (int, error) {
	queryArgs = ApplyUserQueryArgsDefaults(queryArgs)

	dead := "NULL"
	if *queryArgs.Dead {
		dead = "NOT NULL"
	}

	var params []interface{}
	placeHolders := ""
	params = append(params, subject)
	placeHolders = fmt.Sprintf(`%s "subject" = $%d AND `, placeHolders, len(params))

	var err error
	var sqlstr = fmt.Sprintf(`SELECT count(*) from "dbo"."user" WHERE %s "deleted_date" IS %s`, placeHolders, dead)
	s.info(sqlstr)

	var count int
	err = db.QueryRow(sqlstr, params...).Scan(&count)
	if err != nil {
		return -1, err
	}
	return count, nil
}

// AccountInUser returns the Account associated with the User's Subject (subject).
//
// Generated from foreign key 'user_account_subject_fk'.
func (s *MssqlStorage) AccountInUser(db XODB, u *User) (*Account, error) {
	return s.AccountBySubject(db, u.Subject)
}

// UserByID retrieves a row from '"dbo"."user"' as a User.
//
// Generated from index 'PK__user__3213E83FC8BDB47C'.
func (s *MssqlStorage) UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date" ` +
		`FROM "dbo"."user" ` +
		`WHERE "id" = $1`

	// run query
	s.info(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
