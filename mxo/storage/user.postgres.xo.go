// Package storage contains the types for schema 'dbo'.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// InsertUser inserts the User to the database.
func (s *PostgresStorage) InsertUser(db XODB, u *User) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."user" (` +
		`"subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	err = db.QueryRow(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// UpdateUser updates the User in the database.
func (s *PostgresStorage) UpdateUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."user" SET (` +
		`"subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE "id" = $6`

	// run query
	XOLog(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	_, err = db.Exec(sqlstr, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate, u.ID)
	return err
}

// SaveUser saves the User to the database.
func (s *PostgresStorage) SaveUser(db XODB, u *User) error {
	if u.Exists() {
		return s.UpdateUser(db, u)
	}

	return s.InsertUser(db, u)
}

// UpsertUser performs an upsert for User.
func (s *PostgresStorage) UpsertUser(db XODB, u *User) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO "public"."user" (` +
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."subject", EXCLUDED."name", EXCLUDED."created_date", EXCLUDED."changed_date", EXCLUDED."deleted_date"` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	_, err = db.Exec(sqlstr, u.ID, u.Subject, u.Name, u.CreatedDate, u.ChangedDate, u.DeletedDate)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// DeleteUser deletes the User from the database.
func (s *PostgresStorage) DeleteUser(db XODB, u *User) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."user" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// AccountByUserSubject returns the Account associated with the User's Subject (subject).
//
// Generated from foreign key 'user_account_subject_fk'.
func (s *PostgresStorage) AccountByUserSubject(db XODB, u *User) (*Account, error) {
	return s.AccountBySubject(db, u.Subject)
}

// UserByID retrieves a row from '"public"."user"' as a User.
//
// Generated from index 'user_pk'.
func (s *PostgresStorage) UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "subject", "name", "created_date", "changed_date", "deleted_date" ` +
		`FROM "public"."user" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Subject, &u.Name, &u.CreatedDate, &u.ChangedDate, &u.DeletedDate)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
