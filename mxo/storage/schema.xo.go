// Package storage contains the types for schema.
package storage

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"

	"github.com/pkg/errors"
)

// Storage is interface structure for database operation that can be called
type Storage interface {
	// Insert inserts the Account to the database.
	InsertAccount(db XODB, a *Account) error
	// Delete deletes the Account from the database.
	DeleteAccount(db XODB, a *Account) error
	// Update updates the Account in the database.
	UpdateAccount(db XODB, a *Account) error
	// Save saves the Account to the database.
	SaveAccount(db XODB, a *Account) error
	// Upsert performs an upsert for Account.
	UpsertAccount(db XODB, a *Account) error
	// GetMostRecentAccount returns n most recent rows from 'account',
	// ordered by "created_date" in descending order.
	GetMostRecentAccount(db XODB, n int) ([]*Account, error)
	// GetMostRecentChangedAccount returns n most recent rows from 'account',
	// ordered by "changed_date" in descending order.
	GetMostRecentChangedAccount(db XODB, n int) ([]*Account, error)
	// GetAllAccount returns all rows from 'account', based on the AccountQueryArguments.
	// If the AccountQueryArguments is nil, it will use the default AccountQueryArguments instead.
	GetAllAccount(db XODB, queryArgs *AccountQueryArguments) ([]*Account, error)
	// CountAllAccount returns a count of all rows from 'account'
	CountAllAccount(db XODB, queryArgs *AccountQueryArguments) (int, error)
	// Insert inserts the User to the database.
	InsertUser(db XODB, u *User) error
	// Delete deletes the User from the database.
	DeleteUser(db XODB, u *User) error
	// Update updates the User in the database.
	UpdateUser(db XODB, u *User) error
	// Save saves the User to the database.
	SaveUser(db XODB, u *User) error
	// Upsert performs an upsert for User.
	UpsertUser(db XODB, u *User) error
	// GetMostRecentUser returns n most recent rows from 'user',
	// ordered by "created_date" in descending order.
	GetMostRecentUser(db XODB, n int) ([]*User, error)
	// GetMostRecentChangedUser returns n most recent rows from 'user',
	// ordered by "changed_date" in descending order.
	GetMostRecentChangedUser(db XODB, n int) ([]*User, error)
	// GetAllUser returns all rows from 'user', based on the UserQueryArguments.
	// If the UserQueryArguments is nil, it will use the default UserQueryArguments instead.
	GetAllUser(db XODB, queryArgs *UserQueryArguments) ([]*User, error)
	// CountAllUser returns a count of all rows from 'user'
	CountAllUser(db XODB, queryArgs *UserQueryArguments) (int, error)
	// UsersBySubjectFK retrieves rows from user by foreign key Subject.
	// Generated from foreign key Account.
	UsersBySubjectFK(db XODB, subject string, queryArgs *UserQueryArguments) ([]*User, error)
	// CountUsersBySubjectFK count rows from user by foreign key Subject.
	// Generated from foreign key Account.
	CountUsersBySubjectFK(db XODB, subject string, queryArgs *UserQueryArguments) (int, error)
	// AccountInUser returns the Account associated with the User's Subject (subject).
	// Generated from foreign key 'user_account_subject_fk'.
	AccountInUser(db XODB, u *User) (*Account, error)
	// AccountByID retrieves a row from '"public"."account"' as a Account.
	// Generated from index 'account_pk'.
	AccountByID(db XODB, id int) (*Account, error)
	// AccountBySubject retrieves a row from '"public"."account"' as a Account.
	// Generated from index 'account_subject_unique_index'.
	AccountBySubject(db XODB, subject string) (*Account, error)
	// UserByID retrieves a row from '"public"."user"' as a User.
	// Generated from index 'user_pk'.
	UserByID(db XODB, id int) (*User, error)
}

// PostgresStorage is Postgres for the database.
type PostgresStorage struct{}

// MssqlStorage is Mssql for the database.
type MssqlStorage struct{}

// New is a construction method that return a new Storage
func New(driver string, c Config) (Storage, error) {
	var s Storage
	switch driver {
	case "postgres":
		s = &PostgresStorage{}
	case "mssql":
		s = &MssqlStorage{}
	default:
		return nil, errors.New("driver " + driver + " not support")
	}

	logger = c.Logger
	return s, nil
}

// Account represents a row from '"public"."account"'.
type Account struct {
	ID          int      `json:"id"`           // id
	Subject     string   `json:"subject"`      // subject
	Email       string   `json:"email"`        // email
	CreatedDate NullTime `json:"created_date"` // created_date
	ChangedDate NullTime `json:"changed_date"` // changed_date
	DeletedDate NullTime `json:"deleted_date"` // deleted_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Account exists in the database.
func (a *Account) Exists() bool {
	return a._exists
}

// Deleted provides information if the Account has been deleted from the database.
func (a *Account) Deleted() bool {
	return a._deleted
} // User represents a row from '"public"."user"'.
type User struct {
	ID          int            `json:"id"`           // id
	Subject     string         `json:"subject"`      // subject
	Name        sql.NullString `json:"name"`         // name
	CreatedDate NullTime       `json:"created_date"` // created_date
	ChangedDate NullTime       `json:"changed_date"` // changed_date
	DeletedDate NullTime       `json:"deleted_date"` // deleted_date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}
