openapi: 3.0.3
info:
  description: Welcome to the Identity HTTP API documentation! You will find documentation
    for all HTTP APIs here.
  title: Identity
  version: latest
servers:
- url: /
paths:
  /self-service/consent:
    post:
      description: |-
        Use this endpoint to complete a consent flow. This endpoint
        behaves differently for API and browser flows.

        API flows expect `application/json` to be sent in the body and responds with
        HTTP 200 and a application/json body with the session token on success;
        HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body;
        HTTP 400 on form validation errors.

        Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with
        a HTTP 303 redirect to the post/after consent URL or the `return_to` value if it was set and if the consent succeeded;
        a HTTP 303 redirect to the consent UI URL with the flow ID containing the validation errors otherwise.

        More information can be found at:
      operationId: submitConsentFlowRequest
      parameters:
      - description: |-
          The Consent Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/login?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: The Session Token of the Identity performing the consent flow.
        explode: false
        in: header
        name: X-Session-Token
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitConsentFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitConsentFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/consentFlow'
          description: consentFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/consentFlow'
          description: consentFlow
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Submit a Consent Flow'
      tags:
      - consent
  /self-service/consent/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user consent flow. This endpoint will set the appropriate
        cookies and anti-CSRF measures required for browser-based flows.

        If this endpoint is opened as a link in the browser, it will be redirected to
        `selfservice.flows.consent.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter
        `?refresh=true` was set.

        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!

        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
      operationId: initBrowserConsentFlowRequest
      parameters:
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          An optional Hydra consent challenge. If present, Kratos will cooperate with
          Ory Hydra to act as an OAuth2 identity provider.

          The value for this parameter comes from `consent_challenge` URL Query parameter sent to your
          application (e.g. `/consent?consent_challenge=abcde`).
        explode: true
        in: query
        name: consent_challenge
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/consentFlow'
          description: consentFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Consent Flow for Browsers'
      tags:
      - consent
  /self-service/consent/flows:
    get:
      description: |-
        This endpoint returns a consent flow's context with, for example, error details and other information.

        Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
        For AJAX requests you must ensure that cookies are included in the request or requests will fail.

        If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
        and you need to forward the incoming HTTP Cookie header to this endpoint:

        ```js
        pseudo-code example
        router.get('/consent', async function (req, res) {
        const flow = await client.getSelfServiceConsentFlow(req.header('cookie'), req.query['flow'])

        res.render('consent', flow)
        })
        ```

        This request may fail due to several reasons. The `error.id` can be one of:

        `session_already_available`: The user is already signed in.
        `self_service_flow_expired`: The flow is expired and you should request a new one.
      operationId: getConsentFlowRequest
      parameters:
      - description: |-
          The Consent Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/consent?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/consentFlow'
          description: consentFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Consent Flow'
      tags:
      - consent
  /self-service/login:
    post:
      description: |-
        Use this endpoint to complete a login flow. This endpoint
        behaves differently for API and browser flows.

        API flows expect `application/json` to be sent in the body and responds with
        HTTP 200 and a application/json body with the session token on success;
        HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body;
        HTTP 400 on form validation errors.

        Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with
        a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded;
        a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.

        Browser flows with an accept header of `application/json` will not redirect but instead respond with
        HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
        HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.

        If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `session_already_available`: The user is already signed in.
        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
        `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
        Most likely used in Social Sign In flows.

        More information can be found at:
      operationId: submitLoginFlowRequest
      parameters:
      - description: |-
          The Login Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/login?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: The Session Token of the Identity performing the settings flow.
        explode: false
        in: header
        name: X-Session-Token
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitLoginFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitLoginFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submitLoginFlowResponse'
          description: submitLoginFlowResponse
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/browserLocationChangeRequiredResponse'
          description: browserLocationChangeRequiredResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Submit a Login Flow'
      tags:
      - login
  /self-service/login/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate
        cookies and anti-CSRF measures required for browser-based flows.

        If this endpoint is opened as a link in the browser, it will be redirected to
        `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter
        `?refresh=true` was set.

        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `session_already_available`: The user is already signed in.
        `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet.
        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!

        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
      operationId: initBrowserLoginFlowRequest
      parameters:
      - description: |-
          Refresh a login session

          If set to true, this will refresh an existing login session by
          asking the user to sign in again. This will reset the
          authenticated_at time of the session.
        explode: true
        in: query
        name: refresh
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Request a Specific AuthenticationMethod Assurance Level

          Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This
          allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password,
          the AAL is 1. If you wish to "upgrade" the session's security by asking the user to perform TOTP / WebAuth/ ...
          you would set this to "aal2".
        explode: true
        in: query
        name: aal
        required: false
        schema:
          type: string
        style: form
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          An optional Hydra login challenge. If present, Kratos will cooperate with
          Ory Hydra to act as an OAuth2 identity provider.

          The value for this parameter comes from `login_challenge` URL Query parameter sent to your
          application (e.g. `/login?login_challenge=abcde`).
        explode: true
        in: query
        name: login_challenge
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Login Flow for Browsers'
      tags:
      - login
  /self-service/login/flows:
    get:
      description: |-
        This endpoint returns a login flow's context with, for example, error details and other information.

        Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
        For AJAX requests you must ensure that cookies are included in the request or requests will fail.

        If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
        and you need to forward the incoming HTTP Cookie header to this endpoint:

        ```js
        pseudo-code example
        router.get('/login', async function (req, res) {
        const flow = await client.getSelfServiceLoginFlow(req.header('cookie'), req.query['flow'])

        res.render('login', flow)
        })
        ```

        This request may fail due to several reasons. The `error.id` can be one of:

        `session_already_available`: The user is already signed in.
        `self_service_flow_expired`: The flow is expired and you should request a new one.
      operationId: getLoginFlowRequest
      parameters:
      - description: |-
          The Login Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/login?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Login Flow'
      tags:
      - login
  /self-service/logout:
    get:
      description: |-
        This endpoint logs out an identity in a self-service manner.

        If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other)
        to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.

        If the `Accept` HTTP header is set to `application/json`, a 204 No Content response
        will be sent on successful logout instead.

        This endpoint is NOT INTENDED for API clients and only works
        with browsers (Chrome, Firefox, ...). For API clients you can
        call the `/self-service/logout/api` URL directly with the Session Token.
      operationId: submitLogoutFlowRequest
      parameters:
      - description: |-
          A Valid Logout Token

          If you do not have a logout token because you only have a session cookie,
          call `/self-service/logout/urls` to generate a URL for this endpoint.
        explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      - description: The URL to return to after the logout was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      - description: |-
          An optional Hydra logout challenge. If present, Kratos will cooperate with
          Ory Hydra to act as an OAuth2 identity provider.

          The value for this parameter comes from `logout_challenge` URL Query parameter sent to your
          application (e.g. `/logout?logout_challenge=abcde`).
        explode: true
        in: query
        name: logout_challenge
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Complete Self-Service Logout'
      tags:
      - logout
  /self-service/logout/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.

        This endpoint is NOT INTENDED for API clients and only works
        with browsers (Chrome, Firefox, ...). For API clients you can
        call the `/self-service/logout/api` URL directly with the Session Token.

        The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns
        a 401 error.

        When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
      operationId: initBrowserLogoutFlowRequest
      parameters:
      - description: |-
          An optional Hydra logout challenge. If present, Kratos will cooperate with
          Ory Hydra to act as an OAuth2 identity provider.

          The value for this parameter comes from `logout_challenge` URL Query parameter sent to your
          application (e.g. `/logout?logout_challenge=abcde`).
        explode: true
        in: query
        name: logout_challenge
        required: false
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          If you call this endpoint from a backend, please include the
          original Cookie header in the request.
        explode: false
        in: header
        name: cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initBrowserLogoutFlowResponse'
          description: initBrowserLogoutFlowResponse
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Create a Logout URL for Browsers'
      tags:
      - logout
  /self-service/recovery:
    post:
      description: |-
        Use this endpoint to complete a recovery flow. This endpoint
        behaves differently for API and browser flows and has several states:

        `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
        and works with API- and Browser-initiated flows.
        For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid.
        and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired).
        For Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended.
        `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It
        works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
        `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a recovery link")
        does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL
        (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with
        a new Recovery Flow ID which contains an error message that the recovery link was invalid.

        More information can be found at.
      operationId: submitRecoveryFlowRequest
      parameters:
      - description: |-
          The Recovery Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/recovery?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: |-
          Recovery Token

          The recovery token which completes the recovery request. If the token
          is invalid (e.g. expired) an error will be shown to the end-user.

          This parameter is usually set in a link and not used by any direct API call.
        explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitRecoveryFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitRecoveryFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Complete Recovery Flow'
      tags:
      - recovery
  /self-service/recovery/browser:
    get:
      description: |-
        This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to
        `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists, the browser is returned to the configured return URL.

        If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects
        or a 400 bad request error if the user is already authenticated.

        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.

        More information can be found at.
      operationId: initBrowserRecoveryFlowRequest
      parameters:
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Recovery Flow for Browsers'
      tags:
      - recovery
  /self-service/recovery/flows:
    get:
      description: |-
        This endpoint returns a recovery flow's context with, for example, error details and other information.

        Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
        For AJAX requests you must ensure that cookies are included in the request or requests will fail.

        If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
        and you need to forward the incoming HTTP Cookie header to this endpoint:

        ```js
        pseudo-code example
        router.get('/recovery', async function (req, res) {
        const flow = await client.getRecoveryFlowRequest(req.header('Cookie'), req.query['flow'])

        res.render('recovery', flow)
        })
        ```

        More information can be found at.
      operationId: getRecoveryFlowRequest
      parameters:
      - description: |-
          The Flow ID

          The value for this parameter comes from `request` URL Query parameter sent to your
          application (e.g. `/recovery?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Recovery Flow'
      tags:
      - recovery
  /self-service/registration:
    post:
      description: |-
        Use this endpoint to complete a registration flow by sending an identity's traits and password. This endpoint
        behaves differently for API and browser flows.

        API flows expect `application/json` to be sent in the body and respond with
        HTTP 200 and a application/json body with the created identity success - if the session hook is configured the
        `session` and `session_token` will also be included;
        HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body;
        HTTP 400 on form validation errors.

        Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with
        a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded;
        a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.

        Browser flows with an accept header of `application/json` will not redirect but instead respond with
        HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
        HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.

        If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `session_already_available`: The user is already signed in.
        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
        `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
        Most likely used in Social Sign In flows.

        More information can be found at:
      operationId: submitRegistrationFlowRequest
      parameters:
      - description: |-
          The Registration Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/registration?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitRegistrationFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitRegistrationFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/submitRegistrationFlowResponse'
          description: submitRegistrationFlowResponse
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Submit a Registration Flow'
      tags:
      - registration
  /self-service/registration/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate
        cookies and anti-CSRF measures required for browser-based flows.

        :::info

        This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.

        :::

        If this endpoint is opened as a link in the browser, it will be redirected to
        `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists already, the browser will be redirected to `urls.default_redirect_url`.

        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `session_already_available`: The user is already signed in.
        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!

        If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.

        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
      operationId: initBrowserRegistrationFlowRequest
      parameters:
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      - description: |-
          OAuth 2.0 Login Challenge.

          If set will cooperate with OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.

          The value for this parameter comes from `login_challenge` URL Query parameter sent to your
          application (e.g. `/registration?login_challenge=abcde`).

          This feature is compatible with Identity when not running on the Network.
        explode: true
        in: query
        name: login_challenge
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Registration Flow for Browsers'
      tags:
      - registration
  /self-service/registration/flows:
    get:
      description: |-
        This endpoint returns a registration flow's context with, for example, error details and other information.

        Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
        For AJAX requests you must ensure that cookies are included in the request or requests will fail.

        If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
        and you need to forward the incoming HTTP Cookie header to this endpoint:

        ```js
        pseudo-code example
        router.get('/registration', async function (req, res) {
        const flow = await client.getRegistrationFlowRequest(req.header('cookie'), req.query['flow'])

        res.render('registration', flow)
        })
        ```

        This request may fail due to several reasons. The `error.id` can be one of:

        `session_already_available`: The user is already signed in.
        `self_service_flow_expired`: The flow is expired and you should request a new one.
      operationId: getRegistrationFlowRequest
      parameters:
      - description: |-
          The Registration Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/registration?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Registration Flow'
      tags:
      - registration
  /self-service/settings:
    post:
      description: |-
        Use this endpoint to complete a settings flow by sending an identity's updated password. This endpoint
        behaves differently for API and browser flows.

        API-initiated flows expect `application/json` to be sent in the body and respond with
        HTTP 200 and an application/json body with the session token on success;
        HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.
        HTTP 401 when the endpoint is called without a valid session token.
        HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session's AAL is too low.
        Implies that the user needs to re-authenticate.

        Browser flows without HTTP Header `Accept` or with `Accept: text/*` respond with
        a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded;
        a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise.
        a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session's AAL is too low.

        Browser flows with HTTP Header `Accept: application/json` respond with
        HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
        HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
        HTTP 401 when the endpoint is called without a valid session cookie.
        HTTP 403 when the page is accessed without a session cookie or the session's AAL is too low.
        HTTP 400 on form validation errors.

        Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
        Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
        credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
        to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.

        If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect
        the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`,
        or initiate a refresh login flow otherwise.
        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `session_inactive`: No Identity Session was found - sign in a user first.
        `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other
        identity logged in instead.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
        `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
        Most likely used in Social Sign In flows.

        More information can be found at [Identity User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: submitSettingsFlowRequest
      parameters:
      - description: |-
          The Settings Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/settings?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: The Session Token of the Identity performing the settings flow.
        explode: false
        in: header
        name: X-Session-Token
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitSettingsFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitSettingsFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      security:
      - sessionToken: []
      summary: '# Complete Settings Flow'
      tags:
      - settings
  /self-service/settings/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to
        `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid
        Identity Session Cookie is included in the request, a login flow will be initialized.

        If this endpoint is opened as a link in the browser, it will be redirected to
        `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session
        was set, the browser will be redirected to the login endpoint.

        If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects
        or a 401 forbidden error if no valid session was set.

        Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
        Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
        credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
        to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.

        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `session_inactive`: No Session was found - sign in a user first.
        `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!

        This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
      operationId: initBrowserSettingsFlowRequest
      parameters:
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Settings Flow for Browsers'
      tags:
      - settings
  /self-service/settings/flows:
    get:
      description: |-
        When accessing this endpoint through Identity' Public API you must ensure that either the Identity Session Cookie
        or the Identity Session Token are set.

        Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
        Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
        credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
        to sign in with the second factor or change the configuration.

        You can access this endpoint without credentials when using Identity' Admin API.

        If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
        case of an error, the `error.id` of the JSON response body can be one of:

        `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
        `session_inactive`: No Identity Session was found - sign in a user first.
        `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other
        identity logged in instead.

        More information can be found at
      operationId: getSettingsFlowRequest
      parameters:
      - description: |-
          ID is the Settings Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/settings?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          The Session Token

          When using the SDK in an app without a browser, please include the
          session token here.
        explode: false
        in: header
        name: X-Session-Token
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Settings Flow'
      tags:
      - settings
  /self-service/verification:
    post:
      description: |-
        Use this endpoint to complete a verification flow. This endpoint
        behaves differently for API and browser flows and has several states:

        `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
        and works with API- and Browser-initiated flows.
        For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid
        and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired).
        For Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended.
        `sent_email` is the success state after `choose_method` when using the `captcha` method and allows the user to request another verification email. It
        works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
        `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a verification captcha")
        does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL
        (if the captcha was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with
        a new Verification Flow ID which contains an error message that the verification captcha was invalid.

        More information can be found at:
      operationId: submitVerificationFlowRequest
      parameters:
      - description: |-
          The Verification Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/verification?flow=abcde`).
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      - description: |-
          Verification Token

          The verification token which completes the verification request. If the token
          is invalid (e.g. expired) an error will be shown to the end-user.

          This parameter is usually set in a captcha and not used by any direct API call.
        explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
          sent by the client to your server here. This ensures that CSRF and session cookies are respected.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitVerificationFlowBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/submitVerificationFlowBody'
        required: true
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Complete Verification Flow'
      tags:
      - verification
  /self-service/verification/browser:
    get:
      description: |-
        This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to
        `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.

        If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).
      operationId: initBrowserVerificationFlowRequest
      parameters:
      - description: The URL to return the browser to after the flow was completed.
        explode: true
        in: query
        name: return_to
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "303":
          description: Empty responses are sent when, for example, resources are deleted.
            The HTTP status code for empty responses is typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Initialize Verification Flow for Browser Clients'
      tags:
      - verification
  /self-service/verification/flows:
    get:
      description: |-
        This endpoint returns a verification flow's context with, for example, error details and other information.

        Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
        For AJAX requests you must ensure that cookies are included in the request or requests will fail.

        If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
        and you need to forward the incoming HTTP Cookie header to this endpoint:

        ```js
        pseudo-code example
        router.get('/recovery', async function (req, res) {
        const flow = await client.getVerificationFlowRequest(req.header('cookie'), req.query['flow'])

        res.render('verification', flow)
        })
      operationId: getVerificationFlowRequest
      parameters:
      - description: |-
          The Flow ID

          The value for this parameter comes from `request` URL Query parameter sent to your
          application (e.g. `/verification?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      - description: |-
          HTTP Cookies

          When using the SDK on the server side you must include the HTTP Cookie Header
          originally sent to your HTTP handler here.
        explode: false
        in: header
        name: cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Get Verification Flow'
      tags:
      - verification
  /sessions/whoami:
    get:
      description: |-
        Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated.
        Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent.
        Additionally when the request it successful it adds the user ID to the 'X-Identity-Authenticated-Identity-Id' header
        in the response.

        If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:

        ```js
        pseudo-code example
        router.get('/protected-endpoint', async function (req, res) {
        const session = await client.toSessionRequest(undefined, req.header('cookie'))

        console.log(session)
        })
        ```

        When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:

        ```js
        pseudo-code example
        ...
        const session = await client.toSessionRequest("the-session-token")

        console.log(session)
        ```

        Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator
        Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
        credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
        to sign in with the second factor or change the configuration.

        This endpoint is useful for:

        AJAX calls. Remember to send credentials and set up CORS correctly!
        Reverse proxies and API Gateways
        Server-side calls - use the `X-Session-Token` header!

        # This endpoint authenticates users by checking

        if the `Cookie` HTTP header was set containing an Identity Session Cookie;
        if the `Authorization: bearer <session-token>` HTTP header was set with a valid Identity Session Token;
        if the `X-Session-Token` HTTP header was set with a valid Identity Session Token.

        If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.

        As explained above, this request may fail due to several reasons. The `error.id` can be one of:

        `session_inactive`: No active session was found in the request (e.g. no Session Cookie / Session Token).
        `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
      operationId: toSessionRequest
      parameters:
      - description: Set the Session Token when calling from non-browser clients.
          A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
        explode: false
        in: header
        name: X-Session-Token
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
          scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
          An example of a session in the HTTP Cookie Header is: `identity_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.

          It is ok if more than one cookie are included here as all other cookies will be ignored.
        explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
          description: session
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonErrorResponse'
          description: jsonErrorResponse
      summary: '# Check Who the Current HTTP Session Belongs To'
      tags:
      - session
components:
  responses:
    emptyResponse:
      description: Empty responses are sent when, for example, resources are deleted.
        The HTTP status code for empty responses is typically 201.
  schemas:
    APILoginFlow:
      properties:
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - session
      type: object
    APIRegistrationFlow:
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            This field is only set when the session hook is configured as a post-registration hook.

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - identity
      type: object
    Identity:
      description: |-
        An identity can be a real human, a service, an IoT device - everything that
        can be described as an "actor" in a system.
      example:
        traits:
          mobile: mobile
          email: email
        updated_at: 2000-01-23T04:56:07.000+00:00
        credentials:
          key:
            updated_at: 2000-01-23T04:56:07.000+00:00
            identifiers:
            - identifier: identifier
              updated_at: 2000-01-23T04:56:07.000+00:00
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              properties: '{}'
            - identifier: identifier
              updated_at: 2000-01-23T04:56:07.000+00:00
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              properties: '{}'
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            config: '{}'
        subject: subject
        verifiable_addresses:
        - identifier: identifier
          verified: true
          id: id
          primary: true
        - identifier: identifier
          verified: true
          id: id
          primary: true
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        source: source
        locked: true
      properties:
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        credentials:
          additionalProperties:
            $ref: '#/components/schemas/identityCredential'
          description: Credentials represents all credentials that can be used for
            authenticating this identity.
          type: object
        id:
          description: |-
            ID is the identity's unique identifier.

            The Identity ID can not be changed and can not be chosen. This ensures future
            compatibility and optimization for distributed stores such as CockroachDB.
          type: string
        locked:
          description: Is the user been locked
          type: boolean
        source:
          description: the identity's source, e.g. local or github...
          type: string
        state:
          $ref: '#/components/schemas/identityState'
        subject:
          description: generate by id
          type: string
        traits:
          $ref: '#/components/schemas/IdentityTraits'
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
        verifiable_addresses:
          description: VerifiableAddresses contains all the addresses that can be
            verified by the user.
          items:
            $ref: '#/components/schemas/verifiableAddress'
          type: array
          x-omitempty: true
      required:
      - id
      - traits
      title: Identity represents an identity
      type: object
    IdentityTraits:
      example:
        mobile: mobile
        email: email
      properties:
        email:
          description: |-
            The identity's email

            It's optional, have at least one email and mobile
          type: string
        mobile:
          description: |-
            The identity's mobile

            It's optional, have at least one email and mobile
          type: string
      type: object
    JSONRawMessage:
      title: JSONRawMessage represents a json.RawMessage that works well with JSON,
        SQL, and Swagger.
      type: object
    OAuth2Client:
      example:
        metadata: '{}'
        token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
        client_uri: client_uri
        jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
        jwks: '{}'
        logo_uri: logo_uri
        created_at: 2000-01-23T04:56:07.000+00:00
        registration_client_uri: registration_client_uri
        allowed_cors_origins:
        - allowed_cors_origins
        - allowed_cors_origins
        refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
        registration_access_token: registration_access_token
        client_id: client_id
        token_endpoint_auth_method: token_endpoint_auth_method
        userinfo_signed_response_alg: userinfo_signed_response_alg
        authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
        authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
        client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
        updated_at: 2000-01-23T04:56:07.000+00:00
        scope: scope
        request_uris:
        - request_uris
        - request_uris
        client_secret: client_secret
        backchannel_logout_session_required: true
        backchannel_logout_uri: backchannel_logout_uri
        client_name: client_name
        policy_uri: policy_uri
        owner: owner
        audience:
        - audience
        - audience
        authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
        post_logout_redirect_uris:
        - post_logout_redirect_uris
        - post_logout_redirect_uris
        grant_types:
        - grant_types
        - grant_types
        subject_type: subject_type
        refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
        redirect_uris:
        - redirect_uris
        - redirect_uris
        sector_identifier_uri: sector_identifier_uri
        frontchannel_logout_session_required: true
        frontchannel_logout_uri: frontchannel_logout_uri
        refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
        implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
        client_secret_expires_at: 0
        implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
        jwks_uri: jwks_uri
        request_object_signing_alg: request_object_signing_alg
        tos_uri: tos_uri
        contacts:
        - contacts
        - contacts
        response_types:
        - response_types
        - response_types
      properties:
        allowed_cors_origins:
          items:
            type: string
          type: array
        audience:
          items:
            type: string
          type: array
        authorization_code_grant_access_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        authorization_code_grant_id_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        authorization_code_grant_refresh_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        backchannel_logout_session_required:
          description: OpenID Connect Back-Channel Logout Session Required  Boolean
            value specifying whether the RP requires that a sid (session ID) Claim
            be included in the Logout Token to identify the RP session with the OP
            when the backchannel_logout_uri is used. If omitted, the default value
            is false.
          type: boolean
        backchannel_logout_uri:
          description: OpenID Connect Back-Channel Logout URI  RP URL that will cause
            the RP to log itself out when sent a Logout Token by the OP.
          type: string
        client_credentials_grant_access_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        client_id:
          description: OAuth 2.0 Client ID  The ID is autogenerated and immutable.
          type: string
        client_name:
          description: OAuth 2.0 Client Name  The human-readable name of the client
            to be presented to the end-user during authorization.
          type: string
        client_secret:
          description: OAuth 2.0 Client Secret  The secret will be included in the
            create request as cleartext, and then never again. The secret is kept
            in hashed format and is not recoverable once lost.
          type: string
        client_secret_expires_at:
          description: OAuth 2.0 Client Secret Expires At  The field is currently
            not supported and its value is always 0.
          format: int64
          type: integer
        client_uri:
          description: OAuth 2.0 Client URI  ClientURI is a URL string of a web page
            providing information about the client. If present, the server SHOULD
            display this URL to the end-user in a clickable fashion.
          type: string
        contacts:
          items:
            type: string
          type: array
        created_at:
          description: OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp
            of the client's creation.
          format: date-time
          type: string
        frontchannel_logout_session_required:
          description: OpenID Connect Front-Channel Logout Session Required  Boolean
            value specifying whether the RP requires that iss (issuer) and sid (session
            ID) query parameters be included to identify the RP session with the OP
            when the frontchannel_logout_uri is used. If omitted, the default value
            is false.
          type: boolean
        frontchannel_logout_uri:
          description: OpenID Connect Front-Channel Logout URI  RP URL that will cause
            the RP to log itself out when rendered in an iframe by the OP. An iss
            (issuer) query parameter and a sid (session ID) query parameter MAY be
            included by the OP to enable the RP to validate the request and to determine
            which of the potentially multiple sessions is to be logged out; if either
            is included, both MUST be.
          type: string
        grant_types:
          items:
            type: string
          type: array
        implicit_grant_access_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        implicit_grant_id_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        jwks:
          description: OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set
            [JWK] document, passed by value. The semantics of the jwks parameter are
            the same as the jwks_uri parameter, other than that the JWK Set is passed
            by value, rather than by reference. This parameter is intended only to
            be used by Clients that, for some reason, are unable to use the jwks_uri
            parameter, for instance, by native applications that might not have a
            location to host the contents of the JWK Set. If a Client can use jwks_uri,
            it MUST NOT use jwks. One significant downside of jwks is that it does
            not enable key rotation (which jwks_uri does, as described in Section
            10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters
            MUST NOT be used together.
          type: object
        jwks_uri:
          description: OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's
            JSON Web Key Set [JWK] document. If the Client signs requests to the Server,
            it contains the signing key(s) the Server uses to validate signatures
            from the Client. The JWK Set MAY also contain the Client's encryption
            keys(s), which are used by the Server to encrypt responses to the Client.
            When both signing and encryption keys are made available, a use (Key Use)
            parameter value is REQUIRED for all keys in the referenced JWK Set to
            indicate each key's intended usage. Although some algorithms allow the
            same key to be used for both signatures and encryption, doing so is NOT
            RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to
            provide X.509 representations of keys provided. When used, the bare key
            values MUST still be present and MUST match those in the certificate.
          type: string
        jwt_bearer_grant_access_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        logo_uri:
          description: OAuth 2.0 Client Logo URI  A URL string referencing the client's
            logo.
          type: string
        metadata:
          type: object
        owner:
          description: OAuth 2.0 Client Owner  Owner is a string identifying the owner
            of the OAuth 2.0 Client.
          type: string
        policy_uri:
          description: OAuth 2.0 Client Policy URI  PolicyURI is a URL string that
            points to a human-readable privacy policy document that describes how
            the deployment organization collects, uses, retains, and discloses personal
            data.
          type: string
        post_logout_redirect_uris:
          items:
            type: string
          type: array
        redirect_uris:
          items:
            type: string
          type: array
        refresh_token_grant_access_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        refresh_token_grant_id_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        refresh_token_grant_refresh_token_lifespan:
          description: Specify a time duration in milliseconds, seconds, minutes,
            hours.
          type: string
        registration_access_token:
          description: OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken
            can be used to update, get, or delete the OAuth2 Client. It is sent when
            creating a client using Dynamic Client Registration.
          type: string
        registration_client_uri:
          description: OpenID Connect Dynamic Client Registration URL  RegistrationClientURI
            is the URL used to update, get, or delete the OAuth2 Client.
          type: string
        request_object_signing_alg:
          description: OpenID Connect Request Object Signing Algorithm  JWS [JWS]
            alg algorithm [JWA] that MUST be used for signing Request Objects sent
            to the OP. All Request Objects from this Client MUST be rejected, if not
            signed with this algorithm.
          type: string
        request_uris:
          items:
            type: string
          type: array
        response_types:
          items:
            type: string
          type: array
        scope:
          description: OAuth 2.0 Client Scope  Scope is a string containing a space-separated
            list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
            that the client can use when requesting access tokens.
          type: string
        sector_identifier_uri:
          description: OpenID Connect Sector Identifier URI  URL using the https scheme
            to be used in calculating Pseudonymous Identifiers by the OP. The URL
            references a file with a single JSON array of redirect_uri values.
          type: string
        subject_type:
          description: OpenID Connect Subject Type  The `subject_types_supported`
            Discovery parameter contains a list of the supported subject_type values
            for this server. Valid types include `pairwise` and `public`.
          type: string
        token_endpoint_auth_method:
          description: 'OAuth 2.0 Token Endpoint Authentication Method  Requested
            Client Authentication method for the Token Endpoint. The options are:  `client_secret_post`:
            (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded`
            in the HTTP body. `client_secret_basic`: Send `client_id` and `client_secret`
            as `application/x-www-form-urlencoded` encoded in the HTTP Authorization
            header. `private_key_jwt`: Use JSON Web Tokens to authenticate the client.
            `none`: Used for public clients (native apps, mobile apps) which can not
            have secrets.'
          type: string
        token_endpoint_auth_signing_alg:
          description: OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client
            Authentication signing algorithm for the Token Endpoint.
          type: string
        tos_uri:
          description: OAuth 2.0 Client Terms of Service URI  A URL string pointing
            to a human-readable terms of service document for the client that describes
            a contractual relationship between the end-user and the client that the
            end-user accepts when authorizing the client.
          type: string
        updated_at:
          description: OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp
            of the last update.
          format: date-time
          type: string
        userinfo_signed_response_alg:
          description: OpenID Connect Request Userinfo Signed Response Algorithm  JWS
            alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is
            specified, the response will be JWT [JWT] serialized, and signed using
            JWS. The default, if omitted, is for the UserInfo Response to return the
            Claims as a UTF-8 encoded JSON object using the application/json content-type.
          type: string
      title: OAuth2Client OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID
        Connect flows. Usually, OAuth 2.0 clients are generated for applications which
        want to consume your OAuth 2.0 or OpenID Connect capabilities.
      type: object
    OAuth2ConsentRequest:
      description: OAuth2ConsentRequest struct for OAuth2ConsentRequest
      example:
        requested_access_token_audience:
        - requested_access_token_audience
        - requested_access_token_audience
        login_challenge: login_challenge
        subject: subject
        amr:
        - amr
        - amr
        oidc_context:
          login_hint: login_hint
          ui_locales:
          - ui_locales
          - ui_locales
          id_token_hint_claims:
            key: '{}'
          acr_values:
          - acr_values
          - acr_values
          display: display
        skip: true
        request_url: request_url
        acr: acr
        context: '{}'
        challenge: challenge
        client:
          metadata: '{}'
          token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
          client_uri: client_uri
          jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
          jwks: '{}'
          logo_uri: logo_uri
          created_at: 2000-01-23T04:56:07.000+00:00
          registration_client_uri: registration_client_uri
          allowed_cors_origins:
          - allowed_cors_origins
          - allowed_cors_origins
          refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
          registration_access_token: registration_access_token
          client_id: client_id
          token_endpoint_auth_method: token_endpoint_auth_method
          userinfo_signed_response_alg: userinfo_signed_response_alg
          authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
          authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
          client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
          updated_at: 2000-01-23T04:56:07.000+00:00
          scope: scope
          request_uris:
          - request_uris
          - request_uris
          client_secret: client_secret
          backchannel_logout_session_required: true
          backchannel_logout_uri: backchannel_logout_uri
          client_name: client_name
          policy_uri: policy_uri
          owner: owner
          audience:
          - audience
          - audience
          authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
          post_logout_redirect_uris:
          - post_logout_redirect_uris
          - post_logout_redirect_uris
          grant_types:
          - grant_types
          - grant_types
          subject_type: subject_type
          refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
          redirect_uris:
          - redirect_uris
          - redirect_uris
          sector_identifier_uri: sector_identifier_uri
          frontchannel_logout_session_required: true
          frontchannel_logout_uri: frontchannel_logout_uri
          refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
          implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
          client_secret_expires_at: 0
          implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
          jwks_uri: jwks_uri
          request_object_signing_alg: request_object_signing_alg
          tos_uri: tos_uri
          contacts:
          - contacts
          - contacts
          response_types:
          - response_types
          - response_types
        login_session_id: login_session_id
        requested_scope:
        - requested_scope
        - requested_scope
      properties:
        acr:
          description: ACR represents the Authentication AuthorizationContext Class
            Reference value for this authentication session. You can use it to express
            that, for example, a user authenticated using two factor authentication.
          type: string
        amr:
          items:
            type: string
          type: array
        challenge:
          description: ID is the identifier (\"authorization challenge\") of the consent
            authorization request. It is used to identify the session.
          type: string
        client:
          $ref: '#/components/schemas/OAuth2Client'
        context:
          type: object
        login_challenge:
          description: LoginChallenge is the login challenge this consent challenge
            belongs to. It can be used to associate a login and consent request in
            the login & consent app.
          type: string
        login_session_id:
          description: LoginSessionID is the login session ID. If the user-agent reuses
            a login session (via cookie / remember flag) this ID will remain the same.
            If the user-agent did not have an existing authentication session (e.g.
            remember is false) this will be a new random value. This value is used
            as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel
            logout. It's value can generally be used to associate consecutive login
            requests by a certain user.
          type: string
        oidc_context:
          $ref: '#/components/schemas/OAuth2ConsentRequestOpenIDConnectContext'
        request_url:
          description: RequestURL is the original OAuth 2.0 Authorization URL requested
            by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization
            Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but
            might come in handy if you want to deal with additional request parameters.
          type: string
        requested_access_token_audience:
          items:
            type: string
          type: array
        requested_scope:
          items:
            type: string
          type: array
        skip:
          description: Skip, if true, implies that the client has requested the same
            scopes from the same user previously. If true, you must not ask the user
            to grant the requested scopes. You must however either allow or deny the
            consent request using the usual API call.
          type: boolean
        subject:
          description: Subject is the user ID of the end-user that authenticated.
            Now, that end user needs to grant or deny the scope requested by the OAuth
            2.0 client.
          type: string
      type: object
    OAuth2ConsentRequestOpenIDConnectContext:
      description: OAuth2ConsentRequestOpenIDConnectContext struct for OAuth2ConsentRequestOpenIDConnectContext
      example:
        login_hint: login_hint
        ui_locales:
        - ui_locales
        - ui_locales
        id_token_hint_claims:
          key: '{}'
        acr_values:
        - acr_values
        - acr_values
        display: display
      properties:
        acr_values:
          description: 'ACRValues is the Authentication AuthorizationContext Class
            Reference requested in the OAuth 2.0 Authorization request. It is a parameter
            defined by OpenID Connect and expresses which level of authentication
            (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested
            Authentication AuthorizationContext Class Reference values. Space-separated
            string that specifies the acr values that the Authorization Server is
            being requested to use for processing this Authentication Request, with
            the values appearing in order of preference. The Authentication AuthorizationContext
            Class satisfied by the authentication performed is returned as the acr
            Claim Value, as specified in Section 2. The acr Claim is requested as
            a Voluntary Claim by this parameter.'
          items:
            type: string
          type: array
        display:
          description: 'Display is a string value that specifies how the Authorization
            Server displays the authentication and consent user interface pages to
            the End-User. The defined values are: page: The Authorization Server SHOULD
            display the authentication and consent UI consistent with a full User
            Agent page view. If the display parameter is not specified, this is the
            default display mode. popup: The Authorization Server SHOULD display the
            authentication and consent UI consistent with a popup User Agent window.
            The popup User Agent window should be of an appropriate size for a login-focused
            dialog and should not obscure the entire window that it is popping up
            over. touch: The Authorization Server SHOULD display the authentication
            and consent UI consistent with a device that leverages a touch interface.
            wap: The Authorization Server SHOULD display the authentication and consent
            UI consistent with a \"feature phone\" type display.  The Authorization
            Server MAY also attempt to detect the capabilities of the User Agent and
            present an appropriate display.'
          type: string
        id_token_hint_claims:
          additionalProperties: true
          description: IDTokenHintClaims are the claims of the ID Token previously
            issued by the Authorization Server being passed as a hint about the End-User's
            current or past authenticated session with the Client.
          type: object
        login_hint:
          description: LoginHint hints about the login identifier the End-User might
            use to log in (if necessary). This hint can be used by an RP if it first
            asks the End-User for their e-mail address (or other identifier) and then
            wants to pass that value as a hint to the discovered authorization service.
            This value MAY also be a phone number in the format specified for the
            phone_number Claim. The use of this parameter is optional.
          type: string
        ui_locales:
          description: UILocales is the End-User'id preferred languages and scripts
            for the user interface, represented as a space-separated list of BCP47
            [RFC5646] language tag values, ordered by preference. For instance, the
            value \"fr-CA fr en\" represents a preference for French as spoken in
            Canada, then French (without a region designation), followed by English
            (without a region designation). An error SHOULD NOT result if some or
            all of the requested locales are not supported by the OpenID Provider.
          items:
            type: string
          type: array
      type: object
    OAuth2LoginRequest:
      description: OAuth2LoginRequest struct for OAuth2LoginRequest
      example:
        requested_access_token_audience:
        - requested_access_token_audience
        - requested_access_token_audience
        subject: subject
        oidc_context:
          login_hint: login_hint
          ui_locales:
          - ui_locales
          - ui_locales
          id_token_hint_claims:
            key: '{}'
          acr_values:
          - acr_values
          - acr_values
          display: display
        challenge: challenge
        client:
          metadata: '{}'
          token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
          client_uri: client_uri
          jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
          jwks: '{}'
          logo_uri: logo_uri
          created_at: 2000-01-23T04:56:07.000+00:00
          registration_client_uri: registration_client_uri
          allowed_cors_origins:
          - allowed_cors_origins
          - allowed_cors_origins
          refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
          registration_access_token: registration_access_token
          client_id: client_id
          token_endpoint_auth_method: token_endpoint_auth_method
          userinfo_signed_response_alg: userinfo_signed_response_alg
          authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
          authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
          client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
          updated_at: 2000-01-23T04:56:07.000+00:00
          scope: scope
          request_uris:
          - request_uris
          - request_uris
          client_secret: client_secret
          backchannel_logout_session_required: true
          backchannel_logout_uri: backchannel_logout_uri
          client_name: client_name
          policy_uri: policy_uri
          owner: owner
          audience:
          - audience
          - audience
          authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
          post_logout_redirect_uris:
          - post_logout_redirect_uris
          - post_logout_redirect_uris
          grant_types:
          - grant_types
          - grant_types
          subject_type: subject_type
          refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
          redirect_uris:
          - redirect_uris
          - redirect_uris
          sector_identifier_uri: sector_identifier_uri
          frontchannel_logout_session_required: true
          frontchannel_logout_uri: frontchannel_logout_uri
          refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
          implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
          client_secret_expires_at: 0
          implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
          jwks_uri: jwks_uri
          request_object_signing_alg: request_object_signing_alg
          tos_uri: tos_uri
          contacts:
          - contacts
          - contacts
          response_types:
          - response_types
          - response_types
        session_id: session_id
        skip: true
        request_url: request_url
        requested_scope:
        - requested_scope
        - requested_scope
      properties:
        challenge:
          description: ID is the identifier (\"login challenge\") of the login request.
            It is used to identify the session.
          type: string
        client:
          $ref: '#/components/schemas/OAuth2Client'
        oidc_context:
          $ref: '#/components/schemas/OAuth2ConsentRequestOpenIDConnectContext'
        request_url:
          description: RequestURL is the original OAuth 2.0 Authorization URL requested
            by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization
            Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but
            might come in handy if you want to deal with additional request parameters.
          type: string
        requested_access_token_audience:
          items:
            type: string
          type: array
        requested_scope:
          items:
            type: string
          type: array
        session_id:
          description: SessionID is the login session ID. If the user-agent reuses
            a login session (via cookie / remember flag) this ID will remain the same.
            If the user-agent did not have an existing authentication session (e.g.
            remember is false) this will be a new random value. This value is used
            as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel
            logout. It's value can generally be used to associate consecutive login
            requests by a certain user.
          type: string
        skip:
          description: Skip, if true, implies that the client has requested the same
            scopes from the same user previously. If true, you can skip asking the
            user to grant the requested scopes, and simply forward the user to the
            redirect URL.  This feature allows you to update / set session information.
          type: boolean
        subject:
          description: Subject is the user ID of the end-user that authenticated.
            Now, that end user needs to grant or deny the scope requested by the OAuth
            2.0 client. If this value is set and `skip` is true, you MUST include
            this subject type when accepting the login request, or the request will
            fail.
          type: string
      type: object
    RecoveryTraits:
      properties:
        email:
          description: |-
            The identity's email

            It's optional, have at least one email and mobile
          type: string
        mobile:
          description: |-
            The identity's mobile

            It's optional, have at least one email and mobile
          type: string
        type:
          description: The identity's type, the value is traits.email or traits.mobile
          type: string
      required:
      - type
      type: object
    RegistrationTraits:
      properties:
        email:
          description: |-
            The identity's email

            It's optional, have at least one email and mobile
          type: string
        mobile:
          description: |-
            The identity's mobile

            It's optional, have at least one email and mobile
          type: string
        type:
          description: The identity's type, the value is traits.email or traits.mobile
          type: string
      required:
      - type
      type: object
    UUID:
      format: uuid4
      type: string
    VerificationTraits:
      properties:
        email:
          description: |-
            The identity's email

            It's optional, have at least one email and mobile
          type: string
        mobile:
          description: |-
            The identity's mobile

            It's optional, have at least one email and mobile
          type: string
        type:
          description: The identity's type, the value is traits.email or traits.mobile
          type: string
      required:
      - type
      type: object
    authenticatorAssuranceLevel:
      description: |-
        The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
        for an attacker to compromise the account.

        Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (e.g.
        password + TOTP) have been used.
      enum:
      - aal0
      - aal1
      - aal2
      - aal3
      title: Authenticator Assurance Level (AAL)
      type: string
    browserLocationChangeRequiredResponse:
      properties:
        code:
          $ref: '#/components/schemas/code'
        detail:
          description: Detail contains further information on the nature of the error.
          example: Member with ID 12345 does not exist
          type: string
        msg:
          description: Message is the error message.
          example: The requested resource could not be found
          type: string
        redirect_browser_to:
          description: Since when the flow has expired
          type: string
        traceId:
          description: TraceId is the identifier for a trace. It is globally unique.
          example: 463ac35c9f6413ad48485a3953bb6124
          type: string
        type:
          description: Type A URI reference that identifies the error type.
          example: https://example.net/validation-error
          type: string
      title: Is sent when a flow requires a browser to change its location.
      type: object
    code:
      description: |-
        Code responses is error code when an error occurred.

        ```

        Success                       Code = 2000 // Success
        BadRequest                    Code = 4000 // BadRequest
        InvalidArguments              Code = 4001 // InvalidArguments
        Forbidden                     Code = 4003 // Forbidden
        NotFound                      Code = 4004 // NotFound
        Internal                      Code = 5000 // Internal
        NoActiveSessionFound          Code = 6001 // NoActiveSessionFound
        AlreadyLoggedIn               Code = 6002 // AlreadyLoggedIn
        LoginFlowExpired              Code = 6003 // LoginFlowExpired
        StrategyNotResponsible        Code = 6004 // StrategyNotResponsible
        CompletedByStrategy           Code = 6005 // CompletedByStrategy
        NoStrategyResponsible         Code = 6006 // NoStrategyResponsible
        InvalidCSRFTokenNotSent       Code = 6007 // InvalidCSRFTokenNotSent
        InvalidCSRFTokenMismatch      Code = 6008 // InvalidCSRFTokenMismatch
        OriginHeaderNeedsBrowserFlow  Code = 6009 // OriginHeaderNeedsBrowserFlow
        CookieHeaderNeedsBrowserFlow  Code = 6010 // CookieHeaderNeedsBrowserFlow
        AddressNotVerified            Code = 6011 // AddressNotVerified
        IdentityDisabled              Code = 6012 // IdentityDisabled
        AALNotSatisfied               Code = 6013 // AALNotSatisfied
        RegistrationDisabled          Code = 6014 // RegistrationDisabled
        RegistrationFlowExpired       Code = 6015 // RegistrationFlowExpired
        HookAbortFlow                 Code = 6016 // HookAbortFlow
        VerificationDisabled          Code = 6017 // VerificationDisabled
        VerificationFlowExpired       Code = 6018 // VerificationFlowExpired
        VerificationFlowNotFound      Code = 6019 // VerificationFlowNotFound
        WorkflowTokenNotFound         Code = 6020 // WorkflowTokenNotFound
        WorkflowTokenExpired          Code = 6021 // WorkflowTokenExpired
        SettingsDisabled              Code = 6022 // SettingsDisabled
        SettingsFlowExpired           Code = 6023 // SettingsFlowExpired
        SettingsFlowNotFound          Code = 6024 // SettingsFlowNotFound
        SecurityIdentityMismatch      Code = 6025 // SecurityIdentityMismatch
        RecoveryDisabled              Code = 6026 // RecoveryDisabled
        RecoveryFlowExpired           Code = 6027 // RecoveryFlowExpired
        RecoveryFlowNotFound          Code = 6028 // RecoveryFlowNotFound
        NeedsReAuth                   Code = 6029 // NeedsReAuth
        SessionRequiredForHigherAAL   Code = 6030 // SessionRequiredForHigherAAL
        BrowserLocationChangeRequired Code = 6031 // BrowserLocationChangeRequired
        ContinuityExpired             Code = 6032 // ContinuityExpired
        APIFlowNotSupported           Code = 6033 // APIFlowNotSupported
        ScopeMissing                  Code = 6034 // ScopeMissing
        IDTokenMissing                Code = 6035 // IDTokenMissing
        ContinueFlow                  Code = 6036 // ContinueFlow
        ConsentFlowExpired            Code = 6037 // ConsentFlowExpired
        IdentityNotFound              Code = 6050 // IdentityNotFound
        IdentityMissing               Code = 6051 // IdentityMissing
        IdentityHasVerified           Code = 6052 // IdentityHasVerified
        IdentityNotVerified           Code = 6053 // IdentityNotVerified
        PasswordMismatch              Code = 6054 // PasswordMismatch
        PasswordMissing               Code = 6055 // PasswordMissing
        InvalidPassword               Code = 6056 // InvalidPassword
        TraitsEmailMissing            Code = 6057 // TraitsEmailMissing
        TraitsMobileMissing           Code = 6058 // TraitsMobileMissing
        InvalidTraitsType             Code = 6059 // InvalidTraitsType
        InvalidTraitsEmail            Code = 6060 // InvalidTraitsEmail
        InvalidTraitsMobile           Code = 6061 // InvalidTraitsMobile
        DuplicateIdentity             Code = 6062 // DuplicateIdentity
        WorkflowTokenHasSent          Code = 6063 // WorkflowTokenHasSent
        WorkflowTokenMissing          Code = 6064 // WorkflowTokenMissing
        WorkflowTokenMismatch         Code = 6065 // WorkflowTokenMismatch
        TotpCodeMissing               Code = 6066 // TotpCodeMissing
        TotpCodeInvalid               Code = 6067 // TotpCodeInvalid
        TotpCodeMismatch              Code = 6068 // TotpCodeMismatch
        RecoveryCodeMismatch          Code = 6069 // RecoveryCodeMismatch
        IdentityNotBind               Code = 6070 // IdentityNotBind
        Unknown                       Code = 9000 // Unknown

        ```
      enum:
      - 4000
      - 4001
      - 4003
      - 4004
      - 5000
      - 6001
      - 6002
      - 6003
      - 6004
      - 6005
      - 6006
      - 6007
      - 6008
      - 6009
      - 6010
      - 6011
      - 6012
      - 6013
      - 6014
      - 6015
      - 6016
      - 6017
      - 6018
      - 6019
      - 6020
      - 6021
      - 6022
      - 6023
      - 6024
      - 6025
      - 6026
      - 6027
      - 6028
      - 6029
      - 6030
      - 6031
      - 6032
      - 6033
      - 6034
      - 6035
      - 6036
      - 6037
      - 6038
      - 6050
      - 6051
      - 6052
      - 6053
      - 6054
      - 6055
      - 6056
      - 6057
      - 6058
      - 6059
      - 6060
      - 6061
      - 6062
      - 6063
      - 6064
      - 6065
      - 6066
      - 6067
      - 6068
      - 6069
      - 6070
      - 9000
      - 2000
      format: int64
      title: Code
      type: integer
    consentFlow:
      description: |-
        This object represents a consent flow. A consent flow is initiated at the "Initiate Consent API / Browser Flow"
        endpoint by a client.

        Once a consent flow is completed successfully, will be redirect oauth client back url.
      example:
        method: method
        created_at: 2000-01-23T04:56:07.000+00:00
        return_to: http://127.0.0.1:4555
        not_ask: true
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: http://127.0.0.1:4433/self-service/consent/browser?aal=&refresh=&return_to=
        oauth2_consent_challenge: oauth2_consent_challenge
        oauth2_consent_request:
          requested_access_token_audience:
          - requested_access_token_audience
          - requested_access_token_audience
          login_challenge: login_challenge
          subject: subject
          amr:
          - amr
          - amr
          oidc_context:
            login_hint: login_hint
            ui_locales:
            - ui_locales
            - ui_locales
            id_token_hint_claims:
              key: '{}'
            acr_values:
            - acr_values
            - acr_values
            display: display
          skip: true
          request_url: request_url
          acr: acr
          context: '{}'
          challenge: challenge
          client:
            metadata: '{}'
            token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
            client_uri: client_uri
            jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
            jwks: '{}'
            logo_uri: logo_uri
            created_at: 2000-01-23T04:56:07.000+00:00
            registration_client_uri: registration_client_uri
            allowed_cors_origins:
            - allowed_cors_origins
            - allowed_cors_origins
            refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
            registration_access_token: registration_access_token
            client_id: client_id
            token_endpoint_auth_method: token_endpoint_auth_method
            userinfo_signed_response_alg: userinfo_signed_response_alg
            authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
            authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
            client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
            updated_at: 2000-01-23T04:56:07.000+00:00
            scope: scope
            request_uris:
            - request_uris
            - request_uris
            client_secret: client_secret
            backchannel_logout_session_required: true
            backchannel_logout_uri: backchannel_logout_uri
            client_name: client_name
            policy_uri: policy_uri
            owner: owner
            audience:
            - audience
            - audience
            authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
            post_logout_redirect_uris:
            - post_logout_redirect_uris
            - post_logout_redirect_uris
            grant_types:
            - grant_types
            - grant_types
            subject_type: subject_type
            refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
            redirect_uris:
            - redirect_uris
            - redirect_uris
            sector_identifier_uri: sector_identifier_uri
            frontchannel_logout_session_required: true
            frontchannel_logout_uri: frontchannel_logout_uri
            refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
            implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
            client_secret_expires_at: 0
            implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
            jwks_uri: jwks_uri
            request_object_signing_alg: request_object_signing_alg
            tos_uri: tos_uri
            contacts:
            - contacts
            - contacts
            response_types:
            - response_types
            - response_types
          login_session_id: login_session_id
          requested_scope:
          - requested_scope
          - requested_scope
        expires_at: 2000-01-23T04:56:07.000+00:00
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        identity:
          traits:
            mobile: mobile
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          credentials:
            key:
              updated_at: 2000-01-23T04:56:07.000+00:00
              identifiers:
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              config: '{}'
          subject: subject
          verifiable_addresses:
          - identifier: identifier
            verified: true
            id: id
            primary: true
          - identifier: identifier
            verified: true
            id: id
            primary: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          source: source
          locked: true
        id: o86sAg8exAbU96qx4gZMfu
        state: state
      properties:
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the flow's unique ID. When performing the consent flow, this
            represents the id in the consent UI's query parameter: http://<selfservice.flows.consent.ui_url>/?flow=<flow_id>
          example: o86sAg8exAbU96qx4gZMfu
          type: string
        identity:
          $ref: '#/components/schemas/Identity'
        issued_at:
          description: IssuedAt is the time (UTC) when the flow started.
          format: date-time
          type: string
        method:
          title: ConsentMethod represents several different consent method, like default
            and so on.
          type: string
        not_ask:
          description: NotAsk stores whether this consent flow should keep user session.
          type: boolean
        oauth2_consent_challenge:
          description: |-
            OAuth 2.0 Consent Challenge.

            This value is set using the `consent_challenge` query parameter of the registration and consent endpoints.
            If set will cooperate with OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
          type: string
        oauth2_consent_request:
          $ref: '#/components/schemas/OAuth2ConsentRequest'
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          example: http://127.0.0.1:4433/self-service/consent/browser?aal=&refresh=&return_to=
          type: string
        return_to:
          description: ReturnTo contains the requested return_to URL.
          example: http://127.0.0.1:4555
          type: string
        state:
          description: |-
            The state represents the state of the consent flow.

            ```
            accepted: ask the user to accepted
            rejected: reject consent by the user
            ```
          title: Consent Flow State
          type: string
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      required:
      - expires_at
      - id
      - identity
      - issued_at
      - request_url
      - state
      - type
      - ui
      title: Consent Flow
      type: object
    consentMethod:
      title: ConsentMethod represents several different consent method, like default
        and so on.
      type: string
    consentState:
      description: |-
        The state represents the state of the consent flow.

        ```
        accepted: ask the user to accepted
        rejected: reject consent by the user
        ```
      title: Consent Flow State
      type: string
    credentialsType:
      description: and so on.
      enum:
      - password
      - oidc
      - totp
      title: CredentialsType  represents several different credential types, like
        password credentials, passwordless credentials,
      type: string
    flowType:
      description: The flow type can either be `api` or `browser`.
      enum:
      - browser
      - api
      title: Type is the flow type.
      type: string
    identityCredential:
      description: IdentityCredential represents a specific credential type
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        identifiers:
        - identifier: identifier
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          properties: '{}'
        - identifier: identifier
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          properties: '{}'
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        config: '{}'
      properties:
        config:
          title: JSONRawMessage represents a json.RawMessage that works well with
            JSON, SQL, and Swagger.
          type: object
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        credential_type:
          $ref: '#/components/schemas/credentialsType'
        id:
          description: ID is the identity credential's unique identifier.
          type: string
        identifiers:
          items:
            $ref: '#/components/schemas/identityCredentialIdentifier'
          type: array
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      type: object
    identityCredentialIdentifier:
      description: IdentityCredentialIdentifier represents some specific identifiers
      example:
        identifier: identifier
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        properties: '{}'
      properties:
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        id:
          description: ID is the identity credential's unique identifier.
          type: string
        identifier:
          description: Identifier is the identifier, e.g. email, mobile or others.
          type: string
        properties:
          title: JSONRawMessage represents a json.RawMessage that works well with
            JSON, SQL, and Swagger.
          type: object
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      type: object
    identityCredentialIdentifierOidcProperties:
      properties:
        initial_access_token:
          type: string
        initial_id_token:
          type: string
        initial_refresh_token:
          type: string
        provider:
          type: string
        subject:
          type: string
      type: object
    identityCredentialIdentifierPasswordProperties:
      properties:
        primary:
          description: |-
            Primary

            Is identifier's primary identity
          type: boolean
        type:
          type: string
        verified:
          description: |-
            Verified

            Is identifier been verified
          type: boolean
      required:
      - primary
      - verified
      type: object
    identityCredentialIdentifiers:
      items:
        $ref: '#/components/schemas/identityCredentialIdentifier'
      type: array
    identityState:
      description: The state can either be `active` or `inactive`.
      enum:
      - active
      - inactive
      title: An Identity's State
      type: string
    initBrowserLogoutFlowResponse:
      example:
        logout_url: http://127.0.0.1:4544/self-service/logout?flow=k8dcbjz6SiTmrSRUSg9xWi
        logout_token: k8dcbjz6SiTmrSRUSg9xWi
      properties:
        logout_token:
          description: LogoutToken can be used to perform logout using AJAX.
          example: k8dcbjz6SiTmrSRUSg9xWi
          type: string
        logout_url:
          description: |-
            LogoutURL can be opened in a browser to sign the user out.

            format: uri
          example: http://127.0.0.1:4544/self-service/logout?flow=k8dcbjz6SiTmrSRUSg9xWi
          type: string
      required:
      - logout_token
      - logout_url
      type: object
    jsonErrorResponse:
      description: Error responses are sent when an error (e.g. unauthorized, bad
        request, ...) occurred.
      properties:
        code:
          $ref: '#/components/schemas/code'
        detail:
          description: Detail contains further information on the nature of the error.
          example: Member with ID 12345 does not exist
          type: string
        msg:
          description: Message is the error message.
          example: The requested resource could not be found
          type: string
        traceId:
          description: TraceId is the identifier for a trace. It is globally unique.
          example: 463ac35c9f6413ad48485a3953bb6124
          type: string
        type:
          description: Type A URI reference that identifies the error type.
          example: https://example.net/validation-error
          type: string
      title: JSON API Error Response
      type: object
    loginFlow:
      description: |-
        This object represents a login flow. A login flow is initiated at the "Initiate Login API / Browser Flow"
        endpoint by a client.

        Once a login flow is completed successfully, a session cookie or session token will be issued.
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        refresh: true
        return_to: http://127.0.0.1:4555
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: http://127.0.0.1:4433/self-service/login/browser?aal=&refresh=&return_to=
        expires_at: 2000-01-23T04:56:07.000+00:00
        oauth2_login_request:
          requested_access_token_audience:
          - requested_access_token_audience
          - requested_access_token_audience
          subject: subject
          oidc_context:
            login_hint: login_hint
            ui_locales:
            - ui_locales
            - ui_locales
            id_token_hint_claims:
              key: '{}'
            acr_values:
            - acr_values
            - acr_values
            display: display
          challenge: challenge
          client:
            metadata: '{}'
            token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
            client_uri: client_uri
            jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
            jwks: '{}'
            logo_uri: logo_uri
            created_at: 2000-01-23T04:56:07.000+00:00
            registration_client_uri: registration_client_uri
            allowed_cors_origins:
            - allowed_cors_origins
            - allowed_cors_origins
            refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
            registration_access_token: registration_access_token
            client_id: client_id
            token_endpoint_auth_method: token_endpoint_auth_method
            userinfo_signed_response_alg: userinfo_signed_response_alg
            authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
            authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
            client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
            updated_at: 2000-01-23T04:56:07.000+00:00
            scope: scope
            request_uris:
            - request_uris
            - request_uris
            client_secret: client_secret
            backchannel_logout_session_required: true
            backchannel_logout_uri: backchannel_logout_uri
            client_name: client_name
            policy_uri: policy_uri
            owner: owner
            audience:
            - audience
            - audience
            authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
            post_logout_redirect_uris:
            - post_logout_redirect_uris
            - post_logout_redirect_uris
            grant_types:
            - grant_types
            - grant_types
            subject_type: subject_type
            refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
            redirect_uris:
            - redirect_uris
            - redirect_uris
            sector_identifier_uri: sector_identifier_uri
            frontchannel_logout_session_required: true
            frontchannel_logout_uri: frontchannel_logout_uri
            refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
            implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
            client_secret_expires_at: 0
            implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
            jwks_uri: jwks_uri
            request_object_signing_alg: request_object_signing_alg
            tos_uri: tos_uri
            contacts:
            - contacts
            - contacts
            response_types:
            - response_types
            - response_types
          session_id: session_id
          skip: true
          request_url: request_url
          requested_scope:
          - requested_scope
          - requested_scope
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        oauth2_login_challenge: oauth2_login_challenge
        id: o86sAg8exAbU96qx4gZMfu
      properties:
        active:
          $ref: '#/components/schemas/credentialsType'
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the flow's unique ID. When performing the login flow, this
            represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
          example: o86sAg8exAbU96qx4gZMfu
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the flow started.
          format: date-time
          type: string
        oauth2_login_challenge:
          description: |-
            OAuth 2.0 Login Challenge.

            This value is set using the `login_challenge` query parameter of the registration and login endpoints.
            If set will cooperate with OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
          type: string
        oauth2_login_request:
          $ref: '#/components/schemas/OAuth2LoginRequest'
        refresh:
          description: Refresh stores whether this login flow should enforce re-authentication.
          type: boolean
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          example: http://127.0.0.1:4433/self-service/login/browser?aal=&refresh=&return_to=
          type: string
        requested_aal:
          $ref: '#/components/schemas/authenticatorAssuranceLevel'
        return_to:
          description: ReturnTo contains the requested return_to URL.
          example: http://127.0.0.1:4555
          type: string
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      required:
      - expires_at
      - id
      - issued_at
      - request_url
      - type
      - ui
      title: Login Flow
      type: object
    recoveryFlow:
      description: |-
        This request is used when an identity wants to recover their account.

        We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        return_to: return_to
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        created_at:
          description: CreatedAt is a helper struct field for gobuffalo.pop.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting,
            a new request has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the request's unique ID. When performing the recovery flow, this
            represents the id in the recovery ui's query parameter: http://<selfservice.flows.recovery.ui_url>?request=<id>
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the request occurred.
          format: date-time
          type: string
        method:
          $ref: '#/components/schemas/recoveryMethod'
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        return_to:
          description: ReturnTo contains the requested return_to URL.
          type: string
        state:
          $ref: '#/components/schemas/recoveryState'
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for gobuffalo.pop.
          format: date-time
          type: string
      required:
      - expires_at
      - id
      - issued_at
      - request_url
      - state
      - type
      - ui
      title: A Recovery Flow
      type: object
    recoveryMethod:
      enum:
      - captcha
      title: RecoveryMethod represents several different recovery method, like captcha
        and so on.
      type: string
    recoveryState:
      description: |-
        The state represents the state of the recovery flow.

        ```
        choose_method: ask the user to choose a method (e.g. recover account via email)
        sent: the email has been sent to the user
        passed_challenge: the request was successful and the recovery challenge was passed.
        ```
      enum:
      - choose_method
      - sent
      - passed_challenge
      title: Recovery Flow State
      type: string
    registrationFlow:
      description: |-
        This object represents a registration flow. A registration flow is initiated at the "Initiate Registration API / Browser Flow"
        endpoint by a client.
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        oauth2_login_request:
          requested_access_token_audience:
          - requested_access_token_audience
          - requested_access_token_audience
          subject: subject
          oidc_context:
            login_hint: login_hint
            ui_locales:
            - ui_locales
            - ui_locales
            id_token_hint_claims:
              key: '{}'
            acr_values:
            - acr_values
            - acr_values
            display: display
          challenge: challenge
          client:
            metadata: '{}'
            token_endpoint_auth_signing_alg: token_endpoint_auth_signing_alg
            client_uri: client_uri
            jwt_bearer_grant_access_token_lifespan: jwt_bearer_grant_access_token_lifespan
            jwks: '{}'
            logo_uri: logo_uri
            created_at: 2000-01-23T04:56:07.000+00:00
            registration_client_uri: registration_client_uri
            allowed_cors_origins:
            - allowed_cors_origins
            - allowed_cors_origins
            refresh_token_grant_access_token_lifespan: refresh_token_grant_access_token_lifespan
            registration_access_token: registration_access_token
            client_id: client_id
            token_endpoint_auth_method: token_endpoint_auth_method
            userinfo_signed_response_alg: userinfo_signed_response_alg
            authorization_code_grant_id_token_lifespan: authorization_code_grant_id_token_lifespan
            authorization_code_grant_refresh_token_lifespan: authorization_code_grant_refresh_token_lifespan
            client_credentials_grant_access_token_lifespan: client_credentials_grant_access_token_lifespan
            updated_at: 2000-01-23T04:56:07.000+00:00
            scope: scope
            request_uris:
            - request_uris
            - request_uris
            client_secret: client_secret
            backchannel_logout_session_required: true
            backchannel_logout_uri: backchannel_logout_uri
            client_name: client_name
            policy_uri: policy_uri
            owner: owner
            audience:
            - audience
            - audience
            authorization_code_grant_access_token_lifespan: authorization_code_grant_access_token_lifespan
            post_logout_redirect_uris:
            - post_logout_redirect_uris
            - post_logout_redirect_uris
            grant_types:
            - grant_types
            - grant_types
            subject_type: subject_type
            refresh_token_grant_refresh_token_lifespan: refresh_token_grant_refresh_token_lifespan
            redirect_uris:
            - redirect_uris
            - redirect_uris
            sector_identifier_uri: sector_identifier_uri
            frontchannel_logout_session_required: true
            frontchannel_logout_uri: frontchannel_logout_uri
            refresh_token_grant_id_token_lifespan: refresh_token_grant_id_token_lifespan
            implicit_grant_id_token_lifespan: implicit_grant_id_token_lifespan
            client_secret_expires_at: 0
            implicit_grant_access_token_lifespan: implicit_grant_access_token_lifespan
            jwks_uri: jwks_uri
            request_object_signing_alg: request_object_signing_alg
            tos_uri: tos_uri
            contacts:
            - contacts
            - contacts
            response_types:
            - response_types
            - response_types
          session_id: session_id
          skip: true
          request_url: request_url
          requested_scope:
          - requested_scope
          - requested_scope
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        oauth2_login_challenge: oauth2_login_challenge
        created_at: 2000-01-23T04:56:07.000+00:00
        return_to: http://127.0.0.1:4555
        id: o86sAg8exAbU96qx4gZMfu
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: http://127.0.0.1:4433/self-service/registration/browser?aal=&refresh=&return_to=
      properties:
        active:
          $ref: '#/components/schemas/credentialsType'
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the flow's unique ID. When performing the login flow, this
            represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
          example: o86sAg8exAbU96qx4gZMfu
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the flow started.
          format: date-time
          type: string
        oauth2_login_challenge:
          description: |-
            OAuth 2.0 Login Challenge.

            This value is set using the `login_challenge` query parameter of the registration and login endpoints.
            If set will cooperate with OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
          type: string
        oauth2_login_request:
          $ref: '#/components/schemas/OAuth2LoginRequest'
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          example: http://127.0.0.1:4433/self-service/registration/browser?aal=&refresh=&return_to=
          type: string
        return_to:
          description: ReturnTo contains the requested return_to URL.
          example: http://127.0.0.1:4555
          type: string
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      required:
      - expires_at
      - id
      - issued_at
      - request_url
      - type
      - ui
      title: Registration Flow
      type: object
    session:
      description: A Session
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        authentication_methods:
        - completed_at: 2000-01-23T04:56:07.000+00:00
        - completed_at: 2000-01-23T04:56:07.000+00:00
        identity:
          traits:
            mobile: mobile
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          credentials:
            key:
              updated_at: 2000-01-23T04:56:07.000+00:00
              identifiers:
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              config: '{}'
          subject: subject
          verifiable_addresses:
          - identifier: identifier
            verified: true
            id: id
            primary: true
          - identifier: identifier
            verified: true
            id: id
            primary: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          source: source
          locked: true
        authenticated_at: 2000-01-23T04:56:07.000+00:00
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        active:
          description: Active state. If false the session is no longer active.
          type: boolean
        authenticated_at:
          description: |-
            The Session Authentication Timestamp

            When this session was authenticated at. If multi-factor authentication was used this
            is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
          format: date-time
          type: string
        authentication_methods:
          description: A list of authenticators which were used to authenticate the
            session.
          items:
            $ref: '#/components/schemas/sessionAuthenticationMethod'
          title: List of (Used) AuthenticationMethods
          type: array
        authenticator_assurance_level:
          $ref: '#/components/schemas/authenticatorAssuranceLevel'
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        expires_at:
          description: |-
            The Session Expiry

            When this session expires at.
          format: date-time
          type: string
        id:
          description: Session ID
          type: string
        identity:
          $ref: '#/components/schemas/Identity'
        issued_at:
          description: |-
            The Session Issuance Timestamp

            When this session was issued at. Usually equal or close to `authenticated_at`.
          format: date-time
          type: string
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      required:
      - id
      - identity
      type: object
    sessionAuthenticationMethod:
      description: A singular authenticator used during authentication / login.
      example:
        completed_at: 2000-01-23T04:56:07.000+00:00
      properties:
        aal:
          $ref: '#/components/schemas/authenticatorAssuranceLevel'
        completed_at:
          description: When the authentication challenge was completed.
          format: date-time
          type: string
        method:
          $ref: '#/components/schemas/credentialsType'
      title: AuthenticationMethod identifies an authentication method
      type: object
    sessionAuthenticationMethods:
      description: A list of authenticators which were used to authenticate the session.
      items:
        $ref: '#/components/schemas/sessionAuthenticationMethod'
      title: List of (Used) AuthenticationMethods
      type: array
    settingsFlow:
      description: |-
        This flow is used when an identity wants to update settings
        (e.g. profile data, passwords, ...) in a selfservice manner.

        We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        identity:
          traits:
            mobile: mobile
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          credentials:
            key:
              updated_at: 2000-01-23T04:56:07.000+00:00
              identifiers:
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              config: '{}'
          subject: subject
          verifiable_addresses:
          - identifier: identifier
            verified: true
            id: id
            primary: true
          - identifier: identifier
            verified: true
            id: id
            primary: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          source: source
          locked: true
        created_at: 2000-01-23T04:56:07.000+00:00
        return_to: return_to
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          $ref: '#/components/schemas/credentialsType'
        created_at:
          description: CreatedAt is a helper struct field for gobuffalo.pop.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the flow's unique ID. When performing the settings flow, this
            represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
          type: string
        identity:
          $ref: '#/components/schemas/Identity'
        issued_at:
          description: IssuedAt is the time (UTC) when the flow occurred.
          format: date-time
          type: string
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        return_to:
          description: ReturnTo contains the requested return_to URL.
          type: string
        state:
          $ref: '#/components/schemas/settingsState'
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for gobuffalo.pop.
          format: date-time
          type: string
      required:
      - expires_at
      - id
      - identity
      - issued_at
      - request_url
      - state
      - type
      - ui
      title: Flow represents a Settings Flow
      type: object
    settingsMethod:
      enum:
      - password
      - profile
      - totp
      title: SettingsMethod represents several different settings method, like captcha
        and so on.
      type: string
    settingsState:
      description: |-
        show_form: No user data has been collected, or it is invalid, and thus the form should be shown.
        success: Indicates that the settings flow has been updated successfully with the provided data.
        Done will stay true when repeatedly checking. If set to true, done will revert back to false only
        when a flow with invalid (e.g. "please use a valid phone number") data was sent.
      enum:
      - show_form
      - sent
      - success
      title: 'State represents the state of this flow. It knows two states:'
      type: string
    submitConsentFlowBody:
      discriminator:
        mapping:
          default: '#/components/schemas/submitConsentFlowBodyWithDefault'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitConsentFlowBodyWithDefault'
    submitConsentFlowBodyWithDefault:
      properties:
        action:
          description: Action is allow or deny.
          type: string
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        method:
          description: Method should be set to "consent".
          type: string
        not_ask:
          description: |-
            Do Not Ask Me

            If set to true, don't ask me again.
          type: boolean
        scope:
          description: scope is selected by the user.
          items:
            type: string
          type: array
      required:
      - action
      - method
      - not_ask
      - scope
      title: submitConsentFlowBodyWithDefault is used to decode the consent form payload.
      type: object
    submitLoginFlowBody:
      discriminator:
        mapping:
          oidc: '#/components/schemas/submitLoginFlowBodyWithOidc'
          password: '#/components/schemas/submitLoginFlowBodyWithPassword'
          totp: '#/components/schemas/submitLoginFlowBodyWithTotp'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitLoginFlowBodyWithPassword'
      - $ref: '#/components/schemas/submitLoginFlowBodyWithTotp'
      - $ref: '#/components/schemas/submitLoginFlowBodyWithOidc'
    submitLoginFlowBodyWithOidc:
      properties:
        csrf_token:
          description: The CSRF Token
          type: string
        method:
          description: |-
            Method to use

            This field must be set to `oidc` when using the oidc method.
          type: string
        provider:
          description: The provider to register with
          type: string
      required:
      - method
      - provider
      title: SubmitLoginFlowBodyWithOidc is used to decode the login form payload.
      type: object
    submitLoginFlowBodyWithPassword:
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        identifier:
          description: Identifier is the email or username of the user trying to log
            in.
          type: string
        method:
          description: Method should be set to "password" when logging in using the
            identifier and password strategy.
          type: string
        password:
          description: The user's password.
          type: string
      required:
      - identifier
      - method
      - password
      title: submitLoginFlowBodyWithPassword is used to decode the login form payload.
      type: object
    submitLoginFlowBodyWithTotp:
      properties:
        change_auth_code:
          description: |-
            The ChangeAuthCode

            recovery_code | totp_code
          type: string
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        method:
          description: Method should be set to "totp" when logging in using the TOTP
            strategy.
          type: string
        recovery_code:
          description: The Recovery code.
          type: string
        totp_code:
          description: The TOTP code.
          type: string
      required:
      - method
      title: SubmitLoginFlowBodyWithTotp is used to decode the login form payload.
      type: object
    submitLoginFlowResponse:
      description: The Response for Login Flows via API
      example:
        session_token: session_token
        session:
          expires_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          authentication_methods:
          - completed_at: 2000-01-23T04:56:07.000+00:00
          - completed_at: 2000-01-23T04:56:07.000+00:00
          identity:
            traits:
              mobile: mobile
              email: email
            updated_at: 2000-01-23T04:56:07.000+00:00
            credentials:
              key:
                updated_at: 2000-01-23T04:56:07.000+00:00
                identifiers:
                - identifier: identifier
                  updated_at: 2000-01-23T04:56:07.000+00:00
                  created_at: 2000-01-23T04:56:07.000+00:00
                  id: id
                  properties: '{}'
                - identifier: identifier
                  updated_at: 2000-01-23T04:56:07.000+00:00
                  created_at: 2000-01-23T04:56:07.000+00:00
                  id: id
                  properties: '{}'
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                config: '{}'
            subject: subject
            verifiable_addresses:
            - identifier: identifier
              verified: true
              id: id
              primary: true
            - identifier: identifier
              verified: true
              id: id
              primary: true
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            source: source
            locked: true
          authenticated_at: 2000-01-23T04:56:07.000+00:00
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - session
      type: object
    submitRecoveryFlowBody:
      discriminator:
        mapping:
          password: '#/components/schemas/submitRecoveryFlowBodyWithCaptcha'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitRecoveryFlowBodyWithCaptcha'
    submitRecoveryFlowBodyWithCaptcha:
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        method:
          description: Method supports `captcha` only right now.
          type: string
        token:
          description: Recovery Token
          type: string
        traits:
          $ref: '#/components/schemas/RecoveryTraits'
      required:
      - method
      - traits
      type: object
    submitRegistrationFlowBody:
      discriminator:
        mapping:
          oidc: '#/components/schemas/submitRegistrationFlowBodyWithOidc'
          password: '#/components/schemas/submitRegistrationFlowBodyWithPassword'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitRegistrationFlowBodyWithPassword'
      - $ref: '#/components/schemas/submitRegistrationFlowBodyWithOidc'
    submitRegistrationFlowBodyWithOidc:
      description: |-
        SubmitRegistrationFlowBodyWithOidc is used to decode the registration form payload
        when using the oidc method.
      properties:
        csrf_token:
          description: The CSRF Token
          type: string
        method:
          description: |-
            Method to use

            This field must be set to `oidc` when using the oidc method.
          type: string
        provider:
          description: The provider to register with
          type: string
        traits:
          $ref: '#/components/schemas/RegistrationTraits'
      required:
      - method
      - provider
      - traits
      type: object
    submitRegistrationFlowBodyWithPassword:
      description: |-
        SubmitRegistrationFlowBodyWithPassword is used to decode the registration form payload
        when using the password method.
      properties:
        confirm_password:
          description: Password to sign the user up with
          type: string
        csrf_token:
          description: The CSRF Token
          type: string
        method:
          description: |-
            Method to use

            This field must be set to `password` when using the password method.
          type: string
        password:
          description: Password to sign the user up with
          type: string
        traits:
          $ref: '#/components/schemas/RegistrationTraits'
      required:
      - confirm_password
      - method
      - password
      - traits
      type: object
    submitRegistrationFlowResponse:
      description: The Response for Registration Flows via API
      example:
        session_token: session_token
        identity:
          traits:
            mobile: mobile
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          credentials:
            key:
              updated_at: 2000-01-23T04:56:07.000+00:00
              identifiers:
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              - identifier: identifier
                updated_at: 2000-01-23T04:56:07.000+00:00
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                properties: '{}'
              created_at: 2000-01-23T04:56:07.000+00:00
              id: id
              config: '{}'
          subject: subject
          verifiable_addresses:
          - identifier: identifier
            verified: true
            id: id
            primary: true
          - identifier: identifier
            verified: true
            id: id
            primary: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          source: source
          locked: true
        session:
          expires_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          authentication_methods:
          - completed_at: 2000-01-23T04:56:07.000+00:00
          - completed_at: 2000-01-23T04:56:07.000+00:00
          identity:
            traits:
              mobile: mobile
              email: email
            updated_at: 2000-01-23T04:56:07.000+00:00
            credentials:
              key:
                updated_at: 2000-01-23T04:56:07.000+00:00
                identifiers:
                - identifier: identifier
                  updated_at: 2000-01-23T04:56:07.000+00:00
                  created_at: 2000-01-23T04:56:07.000+00:00
                  id: id
                  properties: '{}'
                - identifier: identifier
                  updated_at: 2000-01-23T04:56:07.000+00:00
                  created_at: 2000-01-23T04:56:07.000+00:00
                  id: id
                  properties: '{}'
                created_at: 2000-01-23T04:56:07.000+00:00
                id: id
                config: '{}'
            subject: subject
            verifiable_addresses:
            - identifier: identifier
              verified: true
              id: id
              primary: true
            - identifier: identifier
              verified: true
              id: id
              primary: true
            created_at: 2000-01-23T04:56:07.000+00:00
            id: id
            source: source
            locked: true
          authenticated_at: 2000-01-23T04:56:07.000+00:00
          active: true
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            This field is only set when the session hook is configured as a post-registration hook.

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - identity
      type: object
    submitSettingsFlowBody:
      discriminator:
        mapping:
          password: '#/components/schemas/submitSettingsFlowBodyWithPassword'
          profile: '#/components/schemas/submitSettingsFlowBodyWithProfile'
          totp: '#/components/schemas/submitSettingsFlowBodyWithTotp'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitSettingsFlowBodyWithPassword'
      - $ref: '#/components/schemas/submitSettingsFlowBodyWithTotp'
      - $ref: '#/components/schemas/submitSettingsFlowBodyWithProfile'
    submitSettingsFlowBodyWithPassword:
      properties:
        csrf_token:
          description: CSRFToken is the anti-CSRF token
          type: string
        method:
          description: |-
            Method

            Should be set to password when trying to update a password.
          type: string
        password:
          description: Password is the updated password
          type: string
      required:
      - method
      - password
      type: object
    submitSettingsFlowBodyWithProfile:
      properties:
        csrf_token:
          description: |-
            The Anti-CSRF Token

            This token is only required when performing browser flows.
          type: string
        method:
          description: |-
            Method

            Should be set to profile when trying to update a profile.
          type: string
        token:
          description: Token must contain a valid token based on the
          type: string
        traits:
          $ref: '#/components/schemas/IdentityTraits'
      required:
      - method
      - token
      - traits
      type: object
    submitSettingsFlowBodyWithTotp:
      properties:
        csrf_token:
          description: CSRFToken is the anti-CSRF token
          type: string
        method:
          description: |-
            Method

            Should be set to "totp" when trying to add, update, or remove a totp pairing.
          type: string
        recovery_codes_regenerate:
          description: |-
            RecoveryCodesRegenerate if true will generate new
            recovery codes
          type: boolean
        totp_code:
          description: Code must contain a valid TOTP based on the
          type: string
        totp_unlink:
          description: |-
            UnlinkTOTP if true will remove the TOTP pairing,
            effectively removing the credential. This can be used
            to set up a new TOTP device.
          type: boolean
      required:
      - method
      type: object
    submitVerificationFlowBody:
      discriminator:
        mapping:
          password: '#/components/schemas/submitVerificationFlowBodyWithCaptcha'
        propertyName: method
      oneOf:
      - $ref: '#/components/schemas/submitVerificationFlowBodyWithCaptcha'
    submitVerificationFlowBodyWithCaptcha:
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        method:
          description: Method supports `captcha` only right now.
          type: string
        token:
          description: Verification Token
          type: string
        traits:
          $ref: '#/components/schemas/VerificationTraits'
      required:
      - method
      - traits
      type: object
    uiContainer:
      description: Container represents a HTML Form. The container can work with both
        HTTP Form and JSON requests
      example:
        nodes:
        - meta:
            label:
              context: '{}'
              id: id
              text: text
              type: type
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
          type: text
          group: default
        - meta:
            label:
              context: '{}'
              id: id
              text: text
              type: type
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
          type: text
          group: default
        method: method
        action: action
        messages:
        - context: '{}'
          id: id
          text: text
          type: type
        - context: '{}'
          id: id
          text: text
          type: type
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    uiNode:
      description: |-
        Nodes are represented as HTML elements or their native UI equivalents. For example,
        a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
      example:
        meta:
          label:
            context: '{}'
            id: id
            text: text
            type: type
        messages:
        - context: '{}'
          id: id
          text: text
          type: type
        - context: '{}'
          id: id
          text: text
          type: type
        type: text
        group: default
      properties:
        attributes:
          $ref: '#/components/schemas/uiNodeAttributes'
        group:
          description: |-
            Group specifies which group (e.g. password authenticator) this node belongs to.
            default DefaultGroup
            password PasswordGroup
            oidc OpenIDConnectGroup
            profile ProfileGroup
            link LinkGroup
            captcha CaptchaGroup
            totp TOTPGroup
            lookup_secret LookupGroup
            webauthn WebAuthnGroup
            consent ConsentGroup
          enum:
          - default
          - password
          - oidc
          - profile
          - link
          - captcha
          - totp
          - lookup_secret
          - webauthn
          - consent
          type: string
          x-go-enum-desc: |-
            default DefaultGroup
            password PasswordGroup
            oidc OpenIDConnectGroup
            profile ProfileGroup
            link LinkGroup
            captcha CaptchaGroup
            totp TOTPGroup
            lookup_secret LookupGroup
            webauthn WebAuthnGroup
            consent ConsentGroup
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        meta:
          $ref: '#/components/schemas/uiNodeMeta'
        type:
          description: |-
            The node's type
            text Text
            input Input
            img Image
            a Anchor
            script Script
          enum:
          - text
          - input
          - img
          - a
          - script
          type: string
          x-go-enum-desc: |-
            text Text
            input Input
            img Image
            a Anchor
            script Script
      required:
      - attributes
      - group
      - messages
      - meta
      - type
      title: Node represents a flow's nodes
      type: object
    uiNodeAnchorAttributes:
      properties:
        href:
          description: |-
            The link's href (destination) URL.

            format: uri
          type: string
        id:
          description: A unique identifier
          type: string
        node_type:
          description: |-
            NodeType represents this node's types. It is a mirror of `node.type` and
            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
          type: string
        title:
          $ref: '#/components/schemas/uiText'
      required:
      - href
      - id
      - node_type
      - title
      title: AnchorAttributes represents the attributes of an anchor node.
      type: object
    uiNodeAttributes:
      discriminator:
        mapping:
          a: '#/components/schemas/uiNodeAnchorAttributes'
          img: '#/components/schemas/uiNodeImageAttributes'
          input: '#/components/schemas/uiNodeInputAttributes'
          script: '#/components/schemas/uiNodeScriptAttributes'
          text: '#/components/schemas/uiNodeTextAttributes'
        propertyName: node_type
      oneOf:
      - $ref: '#/components/schemas/uiNodeInputAttributes'
      - $ref: '#/components/schemas/uiNodeTextAttributes'
      - $ref: '#/components/schemas/uiNodeImageAttributes'
      - $ref: '#/components/schemas/uiNodeAnchorAttributes'
      - $ref: '#/components/schemas/uiNodeScriptAttributes'
      title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
    uiNodeImageAttributes:
      properties:
        height:
          description: Height of the image
          format: int64
          type: integer
        id:
          description: A unique identifier
          type: string
        node_type:
          description: |-
            NodeType represents this node's types. It is a mirror of `node.type` and
            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
          type: string
        src:
          description: |-
            The image's source URL.

            format: uri
          type: string
        width:
          description: Width of the image
          format: int64
          type: integer
      required:
      - height
      - id
      - node_type
      - src
      - width
      title: ImageAttributes represents the attributes of an image node.
      type: object
    uiNodeInputAttributeType:
      type: string
    uiNodeInputAttributes:
      description: InputAttributes represents the attributes of an input node
      properties:
        checked:
          description: The input's checked.
          type: boolean
        disabled:
          description: Sets the input's disabled field to true or false.
          type: boolean
        id:
          description: The input's element id
          type: string
        label:
          $ref: '#/components/schemas/uiText'
        name:
          description: The input's element name.
          type: string
        node_type:
          description: |-
            NodeType represents this node's types. It is a mirror of `node.type` and
            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
          type: string
        onclick:
          description: |-
            OnClick may contain javascript which should be executed on click. This is primarily
            used for WebAuthn.
          type: string
        pattern:
          description: The input's pattern.
          type: string
        required:
          description: Mark this input field as required.
          type: boolean
        type:
          type: string
        value:
          description: The input's value.
          nullable: true
      required:
      - disabled
      - id
      - name
      - node_type
      - required
      - type
      type: object
    uiNodeMeta:
      description: |-
        This might include a label and other information that can optionally
        be used to render UIs.
      example:
        label:
          context: '{}'
          id: id
          text: text
          type: type
      properties:
        label:
          $ref: '#/components/schemas/uiText'
      title: A Node's Meta Information
      type: object
    uiNodeScriptAttributes:
      properties:
        async:
          description: The script async type
          type: boolean
        crossorigin:
          description: The script cross origin policy
          type: string
        id:
          description: A unique identifier
          type: string
        integrity:
          description: The script's integrity hash
          type: string
        node_type:
          description: |-
            NodeType represents this node's types. It is a mirror of `node.type` and
            is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
          type: string
        nonce:
          description: |-
            Nonce for CSP

            A nonce you may want to use to improve your Content Security Policy.
            You do not have to use this value but if you want to improve your CSP
            policies you may use it. You can also choose to use your own nonce value!
          type: string
        referrerpolicy:
          description: The script referrer policy
          type: string
        src:
          description: The script source
          type: string
        type:
          description: The script MIME type
          type: string
      required:
      - async
      - crossorigin
      - id
      - integrity
      - node_type
      - nonce
      - referrerpolicy
      - src
      - type
      title: ScriptAttributes represent script nodes which load javascript.
      type: object
    uiNodeTextAttributes:
      properties:
        id:
          description: A unique identifier
          type: string
        node_type:
          description: |-
            NodeType represents this node's types. It is a mirror of `node.type` and
            is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
          type: string
        text:
          $ref: '#/components/schemas/uiText'
      required:
      - id
      - node_type
      - text
      title: TextAttributes represents the attributes of a text node.
      type: object
    uiNodes:
      items:
        $ref: '#/components/schemas/uiNode'
      type: array
    uiText:
      example:
        context: '{}'
        id: id
        text: text
        type: type
      properties:
        context:
          description: The message's context. Useful when customizing messages.
          type: object
        id:
          description: The message ID.
          type: string
        text:
          description: The message text. Written in american english.
          type: string
        type:
          type: string
      required:
      - id
      - text
      - type
      type: object
    uiTextType:
      type: string
    uiTexts:
      items:
        $ref: '#/components/schemas/uiText'
      type: array
    verifiableAddress:
      description: VerifiableAddress is an identity's verifiable address
      example:
        identifier: identifier
        verified: true
        id: id
        primary: true
      properties:
        id:
          description: The ID
          type: string
        identifier:
          description: |-
            The identifier

            example foo@user.com
          type: string
        primary:
          description: |-
            Primary

            Is identifier's primary identity
          type: boolean
        verified:
          description: |-
            Verified

            Is the identifier been verified
          type: boolean
      required:
      - id
      - identifier
      - primary
      - verified
      type: object
    verificationFlow:
      description: |-
        Used to verify an out-of-band communication
        channel such as an email address or a phone number.
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        ui:
          nodes:
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          - meta:
              label:
                context: '{}'
                id: id
                text: text
                type: type
            messages:
            - context: '{}'
              id: id
              text: text
              type: type
            - context: '{}'
              id: id
              text: text
              type: type
            type: text
            group: default
          method: method
          action: action
          messages:
          - context: '{}'
            id: id
            text: text
            type: type
          - context: '{}'
            id: id
            text: text
            type: type
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        return_to: return_to
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        created_at:
          description: CreatedAt is a helper struct field for.
          format: date-time
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,
            a new request has to be initiated.
          format: date-time
          type: string
        id:
          description: |-
            ID represents the request's unique ID. When performing the verification flow, this
            represents the id in the verify ui's query parameter: http://<selfservice.flows.verification.ui_url>?request=<id>

            type: string
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the request occurred.
          format: date-time
          type: string
        method:
          $ref: '#/components/schemas/verificationMethod'
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from Identity. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        return_to:
          description: ReturnTo contains the requested return_to URL.
          type: string
        state:
          $ref: '#/components/schemas/verificationState'
        type:
          $ref: '#/components/schemas/flowType'
        ui:
          $ref: '#/components/schemas/uiContainer'
        updated_at:
          description: UpdatedAt is a helper struct field for.
          format: date-time
          type: string
      required:
      - id
      - state
      - type
      - ui
      title: A Verification Flow
      type: object
    verificationMethod:
      enum:
      - captcha
      title: VerificationMethod represents several different verification method,
        like captcha and so on.
      type: string
    verificationState:
      description: |-
        The state represents the state of the verification flow.

        ```
        choose_method: ask the user to choose a method (e.g. recover account via email)
        sent: the email has been sent to the user
        passed_challenge: the request was successful and the recovery challenge was passed.
        ```
      enum:
      - choose_method
      - sent
      - passed_challenge
      title: Verification Flow State
      type: string
  securitySchemes:
    oryAccessToken:
      in: header
      name: Authorization
      type: apiKey
x-forwarded-proto: string
x-request-id: string
