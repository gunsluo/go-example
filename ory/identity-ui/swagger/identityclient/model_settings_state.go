/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// SettingsState show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
type SettingsState string

// List of settingsState
const (
	SETTINGSSTATE_SHOW_FORM SettingsState = "show_form"
	SETTINGSSTATE_SENT SettingsState = "sent"
	SETTINGSSTATE_SUCCESS SettingsState = "success"
)

var allowedSettingsStateEnumValues = []SettingsState{
	"show_form",
	"sent",
	"success",
}

func (v *SettingsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SettingsState(value)
	for _, existing := range allowedSettingsStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SettingsState", value)
}

// NewSettingsStateFromValue returns a pointer to a valid SettingsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSettingsStateFromValue(v string) (*SettingsState, error) {
	ev := SettingsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SettingsState: valid values are %v", v, allowedSettingsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SettingsState) IsValid() bool {
	for _, existing := range allowedSettingsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to settingsState value
func (v SettingsState) Ptr() *SettingsState {
	return &v
}

type NullableSettingsState struct {
	value *SettingsState
	isSet bool
}

func (v NullableSettingsState) Get() *SettingsState {
	return v.value
}

func (v *NullableSettingsState) Set(val *SettingsState) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsState) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsState(val *SettingsState) *NullableSettingsState {
	return &NullableSettingsState{value: val, isSet: true}
}

func (v NullableSettingsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

