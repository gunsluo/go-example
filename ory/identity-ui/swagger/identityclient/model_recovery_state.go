/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// RecoveryState The state represents the state of the recovery flow.  ``` choose_method: ask the user to choose a method (e.g. recover account via email) sent: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed. ```
type RecoveryState string

// List of recoveryState
const (
	RECOVERYSTATE_CHOOSE_METHOD RecoveryState = "choose_method"
	RECOVERYSTATE_SENT RecoveryState = "sent"
	RECOVERYSTATE_PASSED_CHALLENGE RecoveryState = "passed_challenge"
)

var allowedRecoveryStateEnumValues = []RecoveryState{
	"choose_method",
	"sent",
	"passed_challenge",
}

func (v *RecoveryState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecoveryState(value)
	for _, existing := range allowedRecoveryStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecoveryState", value)
}

// NewRecoveryStateFromValue returns a pointer to a valid RecoveryState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecoveryStateFromValue(v string) (*RecoveryState, error) {
	ev := RecoveryState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecoveryState: valid values are %v", v, allowedRecoveryStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecoveryState) IsValid() bool {
	for _, existing := range allowedRecoveryStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to recoveryState value
func (v RecoveryState) Ptr() *RecoveryState {
	return &v
}

type NullableRecoveryState struct {
	value *RecoveryState
	isSet bool
}

func (v NullableRecoveryState) Get() *RecoveryState {
	return v.value
}

func (v *NullableRecoveryState) Set(val *RecoveryState) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryState) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryState(val *RecoveryState) *NullableRecoveryState {
	return &NullableRecoveryState{value: val, isSet: true}
}

func (v NullableRecoveryState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

