/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
)

// SubmitConsentFlowBodyWithDefault struct for SubmitConsentFlowBodyWithDefault
type SubmitConsentFlowBodyWithDefault struct {
	// Action is allow or deny.
	Action string `json:"action"`
	// Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`
	// Method should be set to \"consent\".
	Method string `json:"method"`
	// Do Not Ask Me  If set to true, don't ask me again.
	NotAsk bool `json:"not_ask"`
	// scope is selected by the user.
	Scope []string `json:"scope"`
}

// NewSubmitConsentFlowBodyWithDefault instantiates a new SubmitConsentFlowBodyWithDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitConsentFlowBodyWithDefault(action string, method string, notAsk bool, scope []string) *SubmitConsentFlowBodyWithDefault {
	this := SubmitConsentFlowBodyWithDefault{}
	this.Action = action
	this.Method = method
	this.NotAsk = notAsk
	this.Scope = scope
	return &this
}

// NewSubmitConsentFlowBodyWithDefaultWithDefaults instantiates a new SubmitConsentFlowBodyWithDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitConsentFlowBodyWithDefaultWithDefaults() *SubmitConsentFlowBodyWithDefault {
	this := SubmitConsentFlowBodyWithDefault{}
	return &this
}

// GetAction returns the Action field value
func (o *SubmitConsentFlowBodyWithDefault) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SubmitConsentFlowBodyWithDefault) GetActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SubmitConsentFlowBodyWithDefault) SetAction(v string) {
	o.Action = v
}

// GetCsrfToken returns the CsrfToken field value if set, zero value otherwise.
func (o *SubmitConsentFlowBodyWithDefault) GetCsrfToken() string {
	if o == nil || o.CsrfToken == nil {
		var ret string
		return ret
	}
	return *o.CsrfToken
}

// GetCsrfTokenOk returns a tuple with the CsrfToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitConsentFlowBodyWithDefault) GetCsrfTokenOk() (*string, bool) {
	if o == nil || o.CsrfToken == nil {
		return nil, false
	}
	return o.CsrfToken, true
}

// HasCsrfToken returns a boolean if a field has been set.
func (o *SubmitConsentFlowBodyWithDefault) HasCsrfToken() bool {
	if o != nil && o.CsrfToken != nil {
		return true
	}

	return false
}

// SetCsrfToken gets a reference to the given string and assigns it to the CsrfToken field.
func (o *SubmitConsentFlowBodyWithDefault) SetCsrfToken(v string) {
	o.CsrfToken = &v
}

// GetMethod returns the Method field value
func (o *SubmitConsentFlowBodyWithDefault) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *SubmitConsentFlowBodyWithDefault) GetMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *SubmitConsentFlowBodyWithDefault) SetMethod(v string) {
	o.Method = v
}

// GetNotAsk returns the NotAsk field value
func (o *SubmitConsentFlowBodyWithDefault) GetNotAsk() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NotAsk
}

// GetNotAskOk returns a tuple with the NotAsk field value
// and a boolean to check if the value has been set.
func (o *SubmitConsentFlowBodyWithDefault) GetNotAskOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotAsk, true
}

// SetNotAsk sets field value
func (o *SubmitConsentFlowBodyWithDefault) SetNotAsk(v bool) {
	o.NotAsk = v
}

// GetScope returns the Scope field value
func (o *SubmitConsentFlowBodyWithDefault) GetScope() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *SubmitConsentFlowBodyWithDefault) GetScopeOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Scope, true
}

// SetScope sets field value
func (o *SubmitConsentFlowBodyWithDefault) SetScope(v []string) {
	o.Scope = v
}

func (o SubmitConsentFlowBodyWithDefault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if o.CsrfToken != nil {
		toSerialize["csrf_token"] = o.CsrfToken
	}
	if true {
		toSerialize["method"] = o.Method
	}
	if true {
		toSerialize["not_ask"] = o.NotAsk
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableSubmitConsentFlowBodyWithDefault struct {
	value *SubmitConsentFlowBodyWithDefault
	isSet bool
}

func (v NullableSubmitConsentFlowBodyWithDefault) Get() *SubmitConsentFlowBodyWithDefault {
	return v.value
}

func (v *NullableSubmitConsentFlowBodyWithDefault) Set(val *SubmitConsentFlowBodyWithDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitConsentFlowBodyWithDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitConsentFlowBodyWithDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitConsentFlowBodyWithDefault(val *SubmitConsentFlowBodyWithDefault) *NullableSubmitConsentFlowBodyWithDefault {
	return &NullableSubmitConsentFlowBodyWithDefault{value: val, isSet: true}
}

func (v NullableSubmitConsentFlowBodyWithDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitConsentFlowBodyWithDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


