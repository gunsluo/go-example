/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// VerificationMethod the model 'VerificationMethod'
type VerificationMethod string

// List of verificationMethod
const (
	VERIFICATIONMETHOD_CAPTCHA VerificationMethod = "captcha"
)

var allowedVerificationMethodEnumValues = []VerificationMethod{
	"captcha",
}

func (v *VerificationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationMethod(value)
	for _, existing := range allowedVerificationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationMethod", value)
}

// NewVerificationMethodFromValue returns a pointer to a valid VerificationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationMethodFromValue(v string) (*VerificationMethod, error) {
	ev := VerificationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationMethod: valid values are %v", v, allowedVerificationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationMethod) IsValid() bool {
	for _, existing := range allowedVerificationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to verificationMethod value
func (v VerificationMethod) Ptr() *VerificationMethod {
	return &v
}

type NullableVerificationMethod struct {
	value *VerificationMethod
	isSet bool
}

func (v NullableVerificationMethod) Get() *VerificationMethod {
	return v.value
}

func (v *NullableVerificationMethod) Set(val *VerificationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationMethod(val *VerificationMethod) *NullableVerificationMethod {
	return &NullableVerificationMethod{value: val, isSet: true}
}

func (v NullableVerificationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

