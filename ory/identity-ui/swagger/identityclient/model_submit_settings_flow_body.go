/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// SubmitSettingsFlowBody - struct for SubmitSettingsFlowBody
type SubmitSettingsFlowBody struct {
	SubmitSettingsFlowBodyWithPassword *SubmitSettingsFlowBodyWithPassword
	SubmitSettingsFlowBodyWithProfile *SubmitSettingsFlowBodyWithProfile
	SubmitSettingsFlowBodyWithTotp *SubmitSettingsFlowBodyWithTotp
}

// SubmitSettingsFlowBodyWithPasswordAsSubmitSettingsFlowBody is a convenience function that returns SubmitSettingsFlowBodyWithPassword wrapped in SubmitSettingsFlowBody
func SubmitSettingsFlowBodyWithPasswordAsSubmitSettingsFlowBody(v *SubmitSettingsFlowBodyWithPassword) SubmitSettingsFlowBody {
	return SubmitSettingsFlowBody{
		SubmitSettingsFlowBodyWithPassword: v,
	}
}

// SubmitSettingsFlowBodyWithProfileAsSubmitSettingsFlowBody is a convenience function that returns SubmitSettingsFlowBodyWithProfile wrapped in SubmitSettingsFlowBody
func SubmitSettingsFlowBodyWithProfileAsSubmitSettingsFlowBody(v *SubmitSettingsFlowBodyWithProfile) SubmitSettingsFlowBody {
	return SubmitSettingsFlowBody{
		SubmitSettingsFlowBodyWithProfile: v,
	}
}

// SubmitSettingsFlowBodyWithTotpAsSubmitSettingsFlowBody is a convenience function that returns SubmitSettingsFlowBodyWithTotp wrapped in SubmitSettingsFlowBody
func SubmitSettingsFlowBodyWithTotpAsSubmitSettingsFlowBody(v *SubmitSettingsFlowBodyWithTotp) SubmitSettingsFlowBody {
	return SubmitSettingsFlowBody{
		SubmitSettingsFlowBodyWithTotp: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubmitSettingsFlowBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SubmitSettingsFlowBodyWithPassword
	err = newStrictDecoder(data).Decode(&dst.SubmitSettingsFlowBodyWithPassword)
	if err == nil {
		jsonSubmitSettingsFlowBodyWithPassword, _ := json.Marshal(dst.SubmitSettingsFlowBodyWithPassword)
		if string(jsonSubmitSettingsFlowBodyWithPassword) == "{}" { // empty struct
			dst.SubmitSettingsFlowBodyWithPassword = nil
		} else {
			match++
		}
	} else {
		dst.SubmitSettingsFlowBodyWithPassword = nil
	}

	// try to unmarshal data into SubmitSettingsFlowBodyWithProfile
	err = newStrictDecoder(data).Decode(&dst.SubmitSettingsFlowBodyWithProfile)
	if err == nil {
		jsonSubmitSettingsFlowBodyWithProfile, _ := json.Marshal(dst.SubmitSettingsFlowBodyWithProfile)
		if string(jsonSubmitSettingsFlowBodyWithProfile) == "{}" { // empty struct
			dst.SubmitSettingsFlowBodyWithProfile = nil
		} else {
			match++
		}
	} else {
		dst.SubmitSettingsFlowBodyWithProfile = nil
	}

	// try to unmarshal data into SubmitSettingsFlowBodyWithTotp
	err = newStrictDecoder(data).Decode(&dst.SubmitSettingsFlowBodyWithTotp)
	if err == nil {
		jsonSubmitSettingsFlowBodyWithTotp, _ := json.Marshal(dst.SubmitSettingsFlowBodyWithTotp)
		if string(jsonSubmitSettingsFlowBodyWithTotp) == "{}" { // empty struct
			dst.SubmitSettingsFlowBodyWithTotp = nil
		} else {
			match++
		}
	} else {
		dst.SubmitSettingsFlowBodyWithTotp = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SubmitSettingsFlowBodyWithPassword = nil
		dst.SubmitSettingsFlowBodyWithProfile = nil
		dst.SubmitSettingsFlowBodyWithTotp = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SubmitSettingsFlowBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SubmitSettingsFlowBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubmitSettingsFlowBody) MarshalJSON() ([]byte, error) {
	if src.SubmitSettingsFlowBodyWithPassword != nil {
		return json.Marshal(&src.SubmitSettingsFlowBodyWithPassword)
	}

	if src.SubmitSettingsFlowBodyWithProfile != nil {
		return json.Marshal(&src.SubmitSettingsFlowBodyWithProfile)
	}

	if src.SubmitSettingsFlowBodyWithTotp != nil {
		return json.Marshal(&src.SubmitSettingsFlowBodyWithTotp)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubmitSettingsFlowBody) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SubmitSettingsFlowBodyWithPassword != nil {
		return obj.SubmitSettingsFlowBodyWithPassword
	}

	if obj.SubmitSettingsFlowBodyWithProfile != nil {
		return obj.SubmitSettingsFlowBodyWithProfile
	}

	if obj.SubmitSettingsFlowBodyWithTotp != nil {
		return obj.SubmitSettingsFlowBodyWithTotp
	}

	// all schemas are nil
	return nil
}

type NullableSubmitSettingsFlowBody struct {
	value *SubmitSettingsFlowBody
	isSet bool
}

func (v NullableSubmitSettingsFlowBody) Get() *SubmitSettingsFlowBody {
	return v.value
}

func (v *NullableSubmitSettingsFlowBody) Set(val *SubmitSettingsFlowBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitSettingsFlowBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitSettingsFlowBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitSettingsFlowBody(val *SubmitSettingsFlowBody) *NullableSubmitSettingsFlowBody {
	return &NullableSubmitSettingsFlowBody{value: val, isSet: true}
}

func (v NullableSubmitSettingsFlowBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitSettingsFlowBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


