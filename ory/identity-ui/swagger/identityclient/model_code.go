/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// Code Code responses is error code when an error occurred.  ```  Success                       Code = 2000 // Success BadRequest                    Code = 4000 // BadRequest InvalidArguments              Code = 4001 // InvalidArguments Forbidden                     Code = 4003 // Forbidden NotFound                      Code = 4004 // NotFound Internal                      Code = 5000 // Internal NoActiveSessionFound          Code = 6001 // NoActiveSessionFound AlreadyLoggedIn               Code = 6002 // AlreadyLoggedIn LoginFlowExpired              Code = 6003 // LoginFlowExpired StrategyNotResponsible        Code = 6004 // StrategyNotResponsible CompletedByStrategy           Code = 6005 // CompletedByStrategy NoStrategyResponsible         Code = 6006 // NoStrategyResponsible InvalidCSRFTokenNotSent       Code = 6007 // InvalidCSRFTokenNotSent InvalidCSRFTokenMismatch      Code = 6008 // InvalidCSRFTokenMismatch OriginHeaderNeedsBrowserFlow  Code = 6009 // OriginHeaderNeedsBrowserFlow CookieHeaderNeedsBrowserFlow  Code = 6010 // CookieHeaderNeedsBrowserFlow AddressNotVerified            Code = 6011 // AddressNotVerified IdentityDisabled              Code = 6012 // IdentityDisabled AALNotSatisfied               Code = 6013 // AALNotSatisfied RegistrationDisabled          Code = 6014 // RegistrationDisabled RegistrationFlowExpired       Code = 6015 // RegistrationFlowExpired HookAbortFlow                 Code = 6016 // HookAbortFlow VerificationDisabled          Code = 6017 // VerificationDisabled VerificationFlowExpired       Code = 6018 // VerificationFlowExpired VerificationFlowNotFound      Code = 6019 // VerificationFlowNotFound WorkflowTokenNotFound         Code = 6020 // WorkflowTokenNotFound WorkflowTokenExpired          Code = 6021 // WorkflowTokenExpired SettingsDisabled              Code = 6022 // SettingsDisabled SettingsFlowExpired           Code = 6023 // SettingsFlowExpired SettingsFlowNotFound          Code = 6024 // SettingsFlowNotFound SecurityIdentityMismatch      Code = 6025 // SecurityIdentityMismatch RecoveryDisabled              Code = 6026 // RecoveryDisabled RecoveryFlowExpired           Code = 6027 // RecoveryFlowExpired RecoveryFlowNotFound          Code = 6028 // RecoveryFlowNotFound NeedsReAuth                   Code = 6029 // NeedsReAuth SessionRequiredForHigherAAL   Code = 6030 // SessionRequiredForHigherAAL BrowserLocationChangeRequired Code = 6031 // BrowserLocationChangeRequired ContinuityExpired             Code = 6032 // ContinuityExpired APIFlowNotSupported           Code = 6033 // APIFlowNotSupported ScopeMissing                  Code = 6034 // ScopeMissing IDTokenMissing                Code = 6035 // IDTokenMissing ContinueFlow                  Code = 6036 // ContinueFlow IdentityNotFound              Code = 6050 // IdentityNotFound IdentityMissing               Code = 6051 // IdentityMissing IdentityHasVerified           Code = 6052 // IdentityHasVerified IdentityNotVerified           Code = 6053 // IdentityNotVerified PasswordMismatch              Code = 6054 // PasswordMismatch PasswordMissing               Code = 6055 // PasswordMissing InvalidPassword               Code = 6056 // InvalidPassword TraitsEmailMissing            Code = 6057 // TraitsEmailMissing TraitsMobileMissing           Code = 6058 // TraitsMobileMissing InvalidTraitsType             Code = 6059 // InvalidTraitsType InvalidTraitsEmail            Code = 6060 // InvalidTraitsEmail InvalidTraitsMobile           Code = 6061 // InvalidTraitsMobile DuplicateIdentity             Code = 6062 // DuplicateIdentity WorkflowTokenHasSent          Code = 6063 // WorkflowTokenHasSent WorkflowTokenMissing          Code = 6064 // WorkflowTokenMissing WorkflowTokenMismatch         Code = 6065 // WorkflowTokenMismatch TotpCodeMissing               Code = 6066 // TotpCodeMissing TotpCodeInvalid               Code = 6067 // TotpCodeInvalid TotpCodeMismatch              Code = 6068 // TotpCodeMismatch RecoveryCodeMismatch          Code = 6069 // RecoveryCodeMismatch IdentityNotBind               Code = 6070 // IdentityNotBind Unknown                       Code = 9000 // Unknown  ```
type Code int64

// List of code
const (
	CODE__4000 Code = 4000
	CODE__4001 Code = 4001
	CODE__4003 Code = 4003
	CODE__4004 Code = 4004
	CODE__5000 Code = 5000
	CODE__6001 Code = 6001
	CODE__6002 Code = 6002
	CODE__6003 Code = 6003
	CODE__6004 Code = 6004
	CODE__6005 Code = 6005
	CODE__6006 Code = 6006
	CODE__6007 Code = 6007
	CODE__6008 Code = 6008
	CODE__6009 Code = 6009
	CODE__6010 Code = 6010
	CODE__6011 Code = 6011
	CODE__6012 Code = 6012
	CODE__6013 Code = 6013
	CODE__6014 Code = 6014
	CODE__6015 Code = 6015
	CODE__6016 Code = 6016
	CODE__6017 Code = 6017
	CODE__6018 Code = 6018
	CODE__6019 Code = 6019
	CODE__6020 Code = 6020
	CODE__6021 Code = 6021
	CODE__6022 Code = 6022
	CODE__6023 Code = 6023
	CODE__6024 Code = 6024
	CODE__6025 Code = 6025
	CODE__6026 Code = 6026
	CODE__6027 Code = 6027
	CODE__6028 Code = 6028
	CODE__6029 Code = 6029
	CODE__6030 Code = 6030
	CODE__6031 Code = 6031
	CODE__6032 Code = 6032
	CODE__6033 Code = 6033
	CODE__6034 Code = 6034
	CODE__6035 Code = 6035
	CODE__6036 Code = 6036
	CODE__6050 Code = 6050
	CODE__6051 Code = 6051
	CODE__6052 Code = 6052
	CODE__6053 Code = 6053
	CODE__6054 Code = 6054
	CODE__6055 Code = 6055
	CODE__6056 Code = 6056
	CODE__6057 Code = 6057
	CODE__6058 Code = 6058
	CODE__6059 Code = 6059
	CODE__6060 Code = 6060
	CODE__6061 Code = 6061
	CODE__6062 Code = 6062
	CODE__6063 Code = 6063
	CODE__6064 Code = 6064
	CODE__6065 Code = 6065
	CODE__6066 Code = 6066
	CODE__6067 Code = 6067
	CODE__6068 Code = 6068
	CODE__6069 Code = 6069
	CODE__6070 Code = 6070
	CODE__9000 Code = 9000
	CODE__2000 Code = 2000
)

var allowedCodeEnumValues = []Code{
	4000,
	4001,
	4003,
	4004,
	5000,
	6001,
	6002,
	6003,
	6004,
	6005,
	6006,
	6007,
	6008,
	6009,
	6010,
	6011,
	6012,
	6013,
	6014,
	6015,
	6016,
	6017,
	6018,
	6019,
	6020,
	6021,
	6022,
	6023,
	6024,
	6025,
	6026,
	6027,
	6028,
	6029,
	6030,
	6031,
	6032,
	6033,
	6034,
	6035,
	6036,
	6050,
	6051,
	6052,
	6053,
	6054,
	6055,
	6056,
	6057,
	6058,
	6059,
	6060,
	6061,
	6062,
	6063,
	6064,
	6065,
	6066,
	6067,
	6068,
	6069,
	6070,
	9000,
	2000,
}

func (v *Code) UnmarshalJSON(src []byte) error {
	var value int64
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Code(value)
	for _, existing := range allowedCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Code", value)
}

// NewCodeFromValue returns a pointer to a valid Code
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeFromValue(v int64) (*Code, error) {
	ev := Code(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Code: valid values are %v", v, allowedCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Code) IsValid() bool {
	for _, existing := range allowedCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to code value
func (v Code) Ptr() *Code {
	return &v
}

type NullableCode struct {
	value *Code
	isSet bool
}

func (v NullableCode) Get() *Code {
	return v.value
}

func (v *NullableCode) Set(val *Code) {
	v.value = val
	v.isSet = true
}

func (v NullableCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCode(val *Code) *NullableCode {
	return &NullableCode{value: val, isSet: true}
}

func (v NullableCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

