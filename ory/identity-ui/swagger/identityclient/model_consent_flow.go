/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"time"
)

// ConsentFlow This object represents a consent flow. A consent flow is initiated at the \"Initiate Consent API / Browser Flow\" endpoint by a client.  Once a consent flow is completed successfully, will be redirect oauth client back url.
type ConsentFlow struct {
	// CreatedAt is a helper struct field for.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
	ExpiresAt time.Time `json:"expires_at"`
	// ID represents the flow's unique ID. When performing the consent flow, this represents the id in the consent UI's query parameter: http://<selfservice.flows.consent.ui_url>/?flow=<flow_id>
	Id string `json:"id"`
	Identity Identity `json:"identity"`
	// IssuedAt is the time (UTC) when the flow started.
	IssuedAt time.Time `json:"issued_at"`
	Method *string `json:"method,omitempty"`
	// NotAsk stores whether this consent flow should keep user session.
	NotAsk *bool `json:"not_ask,omitempty"`
	// OAuth 2.0 Consent Challenge.  This value is set using the `consent_challenge` query parameter of the registration and consent endpoints. If set will cooperate with OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
	Oauth2ConsentChallenge *string `json:"oauth2_consent_challenge,omitempty"`
	Oauth2ConsentRequest *OAuth2ConsentRequest `json:"oauth2_consent_request,omitempty"`
	// RequestURL is the initial URL that was requested from Identity. It can be used to forward information contained in the URL's path or query for example.
	RequestUrl string `json:"request_url"`
	// ReturnTo contains the requested return_to URL.
	ReturnTo *string `json:"return_to,omitempty"`
	// The state represents the state of the consent flow.  ``` accepted: ask the user to accepted rejected: reject consent by the user ```
	State string `json:"state"`
	Type FlowType `json:"type"`
	Ui UiContainer `json:"ui"`
	// UpdatedAt is a helper struct field for.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewConsentFlow instantiates a new ConsentFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentFlow(expiresAt time.Time, id string, identity Identity, issuedAt time.Time, requestUrl string, state string, type_ FlowType, ui UiContainer) *ConsentFlow {
	this := ConsentFlow{}
	this.ExpiresAt = expiresAt
	this.Id = id
	this.Identity = identity
	this.IssuedAt = issuedAt
	this.RequestUrl = requestUrl
	this.State = state
	this.Type = type_
	this.Ui = ui
	return &this
}

// NewConsentFlowWithDefaults instantiates a new ConsentFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentFlowWithDefaults() *ConsentFlow {
	this := ConsentFlow{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ConsentFlow) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConsentFlow) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ConsentFlow) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *ConsentFlow) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *ConsentFlow) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetId returns the Id field value
func (o *ConsentFlow) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConsentFlow) SetId(v string) {
	o.Id = v
}

// GetIdentity returns the Identity field value
func (o *ConsentFlow) GetIdentity() Identity {
	if o == nil {
		var ret Identity
		return ret
	}

	return o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetIdentityOk() (*Identity, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Identity, true
}

// SetIdentity sets field value
func (o *ConsentFlow) SetIdentity(v Identity) {
	o.Identity = v
}

// GetIssuedAt returns the IssuedAt field value
func (o *ConsentFlow) GetIssuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetIssuedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssuedAt, true
}

// SetIssuedAt sets field value
func (o *ConsentFlow) SetIssuedAt(v time.Time) {
	o.IssuedAt = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ConsentFlow) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *ConsentFlow) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *ConsentFlow) SetMethod(v string) {
	o.Method = &v
}

// GetNotAsk returns the NotAsk field value if set, zero value otherwise.
func (o *ConsentFlow) GetNotAsk() bool {
	if o == nil || o.NotAsk == nil {
		var ret bool
		return ret
	}
	return *o.NotAsk
}

// GetNotAskOk returns a tuple with the NotAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetNotAskOk() (*bool, bool) {
	if o == nil || o.NotAsk == nil {
		return nil, false
	}
	return o.NotAsk, true
}

// HasNotAsk returns a boolean if a field has been set.
func (o *ConsentFlow) HasNotAsk() bool {
	if o != nil && o.NotAsk != nil {
		return true
	}

	return false
}

// SetNotAsk gets a reference to the given bool and assigns it to the NotAsk field.
func (o *ConsentFlow) SetNotAsk(v bool) {
	o.NotAsk = &v
}

// GetOauth2ConsentChallenge returns the Oauth2ConsentChallenge field value if set, zero value otherwise.
func (o *ConsentFlow) GetOauth2ConsentChallenge() string {
	if o == nil || o.Oauth2ConsentChallenge == nil {
		var ret string
		return ret
	}
	return *o.Oauth2ConsentChallenge
}

// GetOauth2ConsentChallengeOk returns a tuple with the Oauth2ConsentChallenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetOauth2ConsentChallengeOk() (*string, bool) {
	if o == nil || o.Oauth2ConsentChallenge == nil {
		return nil, false
	}
	return o.Oauth2ConsentChallenge, true
}

// HasOauth2ConsentChallenge returns a boolean if a field has been set.
func (o *ConsentFlow) HasOauth2ConsentChallenge() bool {
	if o != nil && o.Oauth2ConsentChallenge != nil {
		return true
	}

	return false
}

// SetOauth2ConsentChallenge gets a reference to the given string and assigns it to the Oauth2ConsentChallenge field.
func (o *ConsentFlow) SetOauth2ConsentChallenge(v string) {
	o.Oauth2ConsentChallenge = &v
}

// GetOauth2ConsentRequest returns the Oauth2ConsentRequest field value if set, zero value otherwise.
func (o *ConsentFlow) GetOauth2ConsentRequest() OAuth2ConsentRequest {
	if o == nil || o.Oauth2ConsentRequest == nil {
		var ret OAuth2ConsentRequest
		return ret
	}
	return *o.Oauth2ConsentRequest
}

// GetOauth2ConsentRequestOk returns a tuple with the Oauth2ConsentRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetOauth2ConsentRequestOk() (*OAuth2ConsentRequest, bool) {
	if o == nil || o.Oauth2ConsentRequest == nil {
		return nil, false
	}
	return o.Oauth2ConsentRequest, true
}

// HasOauth2ConsentRequest returns a boolean if a field has been set.
func (o *ConsentFlow) HasOauth2ConsentRequest() bool {
	if o != nil && o.Oauth2ConsentRequest != nil {
		return true
	}

	return false
}

// SetOauth2ConsentRequest gets a reference to the given OAuth2ConsentRequest and assigns it to the Oauth2ConsentRequest field.
func (o *ConsentFlow) SetOauth2ConsentRequest(v OAuth2ConsentRequest) {
	o.Oauth2ConsentRequest = &v
}

// GetRequestUrl returns the RequestUrl field value
func (o *ConsentFlow) GetRequestUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestUrl
}

// GetRequestUrlOk returns a tuple with the RequestUrl field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetRequestUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestUrl, true
}

// SetRequestUrl sets field value
func (o *ConsentFlow) SetRequestUrl(v string) {
	o.RequestUrl = v
}

// GetReturnTo returns the ReturnTo field value if set, zero value otherwise.
func (o *ConsentFlow) GetReturnTo() string {
	if o == nil || o.ReturnTo == nil {
		var ret string
		return ret
	}
	return *o.ReturnTo
}

// GetReturnToOk returns a tuple with the ReturnTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetReturnToOk() (*string, bool) {
	if o == nil || o.ReturnTo == nil {
		return nil, false
	}
	return o.ReturnTo, true
}

// HasReturnTo returns a boolean if a field has been set.
func (o *ConsentFlow) HasReturnTo() bool {
	if o != nil && o.ReturnTo != nil {
		return true
	}

	return false
}

// SetReturnTo gets a reference to the given string and assigns it to the ReturnTo field.
func (o *ConsentFlow) SetReturnTo(v string) {
	o.ReturnTo = &v
}

// GetState returns the State field value
func (o *ConsentFlow) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ConsentFlow) SetState(v string) {
	o.State = v
}

// GetType returns the Type field value
func (o *ConsentFlow) GetType() FlowType {
	if o == nil {
		var ret FlowType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetTypeOk() (*FlowType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConsentFlow) SetType(v FlowType) {
	o.Type = v
}

// GetUi returns the Ui field value
func (o *ConsentFlow) GetUi() UiContainer {
	if o == nil {
		var ret UiContainer
		return ret
	}

	return o.Ui
}

// GetUiOk returns a tuple with the Ui field value
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetUiOk() (*UiContainer, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ui, true
}

// SetUi sets field value
func (o *ConsentFlow) SetUi(v UiContainer) {
	o.Ui = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ConsentFlow) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentFlow) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ConsentFlow) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ConsentFlow) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ConsentFlow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["identity"] = o.Identity
	}
	if true {
		toSerialize["issued_at"] = o.IssuedAt
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.NotAsk != nil {
		toSerialize["not_ask"] = o.NotAsk
	}
	if o.Oauth2ConsentChallenge != nil {
		toSerialize["oauth2_consent_challenge"] = o.Oauth2ConsentChallenge
	}
	if o.Oauth2ConsentRequest != nil {
		toSerialize["oauth2_consent_request"] = o.Oauth2ConsentRequest
	}
	if true {
		toSerialize["request_url"] = o.RequestUrl
	}
	if o.ReturnTo != nil {
		toSerialize["return_to"] = o.ReturnTo
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["ui"] = o.Ui
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableConsentFlow struct {
	value *ConsentFlow
	isSet bool
}

func (v NullableConsentFlow) Get() *ConsentFlow {
	return v.value
}

func (v *NullableConsentFlow) Set(val *ConsentFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentFlow(val *ConsentFlow) *NullableConsentFlow {
	return &NullableConsentFlow{value: val, isSet: true}
}

func (v NullableConsentFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


