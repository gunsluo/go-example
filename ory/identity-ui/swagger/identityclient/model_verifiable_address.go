/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
)

// VerifiableAddress VerifiableAddress is an identity's verifiable address
type VerifiableAddress struct {
	// The ID
	Id string `json:"id"`
	// The identifier  example foo@user.com
	Identifier string `json:"identifier"`
	// Primary  Is identifier's primary identity
	Primary bool `json:"primary"`
	// Verified  Is the identifier been verified
	Verified bool `json:"verified"`
}

// NewVerifiableAddress instantiates a new VerifiableAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifiableAddress(id string, identifier string, primary bool, verified bool) *VerifiableAddress {
	this := VerifiableAddress{}
	this.Id = id
	this.Identifier = identifier
	this.Primary = primary
	this.Verified = verified
	return &this
}

// NewVerifiableAddressWithDefaults instantiates a new VerifiableAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifiableAddressWithDefaults() *VerifiableAddress {
	this := VerifiableAddress{}
	return &this
}

// GetId returns the Id field value
func (o *VerifiableAddress) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VerifiableAddress) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VerifiableAddress) SetId(v string) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *VerifiableAddress) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *VerifiableAddress) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *VerifiableAddress) SetIdentifier(v string) {
	o.Identifier = v
}

// GetPrimary returns the Primary field value
func (o *VerifiableAddress) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *VerifiableAddress) GetPrimaryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *VerifiableAddress) SetPrimary(v bool) {
	o.Primary = v
}

// GetVerified returns the Verified field value
func (o *VerifiableAddress) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *VerifiableAddress) GetVerifiedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *VerifiableAddress) SetVerified(v bool) {
	o.Verified = v
}

func (o VerifiableAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["primary"] = o.Primary
	}
	if true {
		toSerialize["verified"] = o.Verified
	}
	return json.Marshal(toSerialize)
}

type NullableVerifiableAddress struct {
	value *VerifiableAddress
	isSet bool
}

func (v NullableVerifiableAddress) Get() *VerifiableAddress {
	return v.value
}

func (v *NullableVerifiableAddress) Set(val *VerifiableAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifiableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifiableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifiableAddress(val *VerifiableAddress) *NullableVerifiableAddress {
	return &NullableVerifiableAddress{value: val, isSet: true}
}

func (v NullableVerifiableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifiableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


