/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
)

// VerificationTraits struct for VerificationTraits
type VerificationTraits struct {
	// The identity's email  It's optional, have at least one email and mobile
	Email *string `json:"email,omitempty"`
	// The identity's mobile  It's optional, have at least one email and mobile
	Mobile *string `json:"mobile,omitempty"`
	// The identity's type, the value is traits.email or traits.mobile
	Type string `json:"type"`
}

// NewVerificationTraits instantiates a new VerificationTraits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationTraits(type_ string) *VerificationTraits {
	this := VerificationTraits{}
	this.Type = type_
	return &this
}

// NewVerificationTraitsWithDefaults instantiates a new VerificationTraits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationTraitsWithDefaults() *VerificationTraits {
	this := VerificationTraits{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *VerificationTraits) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationTraits) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *VerificationTraits) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *VerificationTraits) SetEmail(v string) {
	o.Email = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *VerificationTraits) GetMobile() string {
	if o == nil || o.Mobile == nil {
		var ret string
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationTraits) GetMobileOk() (*string, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *VerificationTraits) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given string and assigns it to the Mobile field.
func (o *VerificationTraits) SetMobile(v string) {
	o.Mobile = &v
}

// GetType returns the Type field value
func (o *VerificationTraits) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VerificationTraits) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VerificationTraits) SetType(v string) {
	o.Type = v
}

func (o VerificationTraits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationTraits struct {
	value *VerificationTraits
	isSet bool
}

func (v NullableVerificationTraits) Get() *VerificationTraits {
	return v.value
}

func (v *NullableVerificationTraits) Set(val *VerificationTraits) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationTraits) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationTraits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationTraits(val *VerificationTraits) *NullableVerificationTraits {
	return &NullableVerificationTraits{value: val, isSet: true}
}

func (v NullableVerificationTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationTraits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


