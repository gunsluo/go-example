/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// RecoveryMethod the model 'RecoveryMethod'
type RecoveryMethod string

// List of recoveryMethod
const (
	RECOVERYMETHOD_CAPTCHA RecoveryMethod = "captcha"
)

var allowedRecoveryMethodEnumValues = []RecoveryMethod{
	"captcha",
}

func (v *RecoveryMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecoveryMethod(value)
	for _, existing := range allowedRecoveryMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecoveryMethod", value)
}

// NewRecoveryMethodFromValue returns a pointer to a valid RecoveryMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecoveryMethodFromValue(v string) (*RecoveryMethod, error) {
	ev := RecoveryMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecoveryMethod: valid values are %v", v, allowedRecoveryMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecoveryMethod) IsValid() bool {
	for _, existing := range allowedRecoveryMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to recoveryMethod value
func (v RecoveryMethod) Ptr() *RecoveryMethod {
	return &v
}

type NullableRecoveryMethod struct {
	value *RecoveryMethod
	isSet bool
}

func (v NullableRecoveryMethod) Get() *RecoveryMethod {
	return v.value
}

func (v *NullableRecoveryMethod) Set(val *RecoveryMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryMethod(val *RecoveryMethod) *NullableRecoveryMethod {
	return &NullableRecoveryMethod{value: val, isSet: true}
}

func (v NullableRecoveryMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

