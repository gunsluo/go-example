/*
 * Identity
 *
 * Welcome to the Identity HTTP API documentation! You will find documentation for all HTTP APIs here.
 *
 * API version: latest
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identityclient

import (
	"encoding/json"
	"fmt"
)

// SubmitVerificationFlowBody - struct for SubmitVerificationFlowBody
type SubmitVerificationFlowBody struct {
	SubmitVerificationFlowBodyWithCaptcha *SubmitVerificationFlowBodyWithCaptcha
}

// SubmitVerificationFlowBodyWithCaptchaAsSubmitVerificationFlowBody is a convenience function that returns SubmitVerificationFlowBodyWithCaptcha wrapped in SubmitVerificationFlowBody
func SubmitVerificationFlowBodyWithCaptchaAsSubmitVerificationFlowBody(v *SubmitVerificationFlowBodyWithCaptcha) SubmitVerificationFlowBody {
	return SubmitVerificationFlowBody{
		SubmitVerificationFlowBodyWithCaptcha: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubmitVerificationFlowBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SubmitVerificationFlowBodyWithCaptcha
	err = newStrictDecoder(data).Decode(&dst.SubmitVerificationFlowBodyWithCaptcha)
	if err == nil {
		jsonSubmitVerificationFlowBodyWithCaptcha, _ := json.Marshal(dst.SubmitVerificationFlowBodyWithCaptcha)
		if string(jsonSubmitVerificationFlowBodyWithCaptcha) == "{}" { // empty struct
			dst.SubmitVerificationFlowBodyWithCaptcha = nil
		} else {
			match++
		}
	} else {
		dst.SubmitVerificationFlowBodyWithCaptcha = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SubmitVerificationFlowBodyWithCaptcha = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SubmitVerificationFlowBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SubmitVerificationFlowBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubmitVerificationFlowBody) MarshalJSON() ([]byte, error) {
	if src.SubmitVerificationFlowBodyWithCaptcha != nil {
		return json.Marshal(&src.SubmitVerificationFlowBodyWithCaptcha)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubmitVerificationFlowBody) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SubmitVerificationFlowBodyWithCaptcha != nil {
		return obj.SubmitVerificationFlowBodyWithCaptcha
	}

	// all schemas are nil
	return nil
}

type NullableSubmitVerificationFlowBody struct {
	value *SubmitVerificationFlowBody
	isSet bool
}

func (v NullableSubmitVerificationFlowBody) Get() *SubmitVerificationFlowBody {
	return v.value
}

func (v *NullableSubmitVerificationFlowBody) Set(val *SubmitVerificationFlowBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitVerificationFlowBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitVerificationFlowBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitVerificationFlowBody(val *SubmitVerificationFlowBody) *NullableSubmitVerificationFlowBody {
	return &NullableSubmitVerificationFlowBody{value: val, isSet: true}
}

func (v NullableSubmitVerificationFlowBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitVerificationFlowBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


